/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres';
import { pgTable, index, uniqueIndex, foreignKey, uuid, varchar, timestamp, numeric, jsonb, integer, boolean, text, serial, pgEnum } from '@payloadcms/db-postgres/drizzle/pg-core';
import { sql, relations } from '@payloadcms/db-postgres/drizzle';
export const enum_pages_blocks_high_impact_hero_links_link_type = pgEnum('enum_pages_blocks_high_impact_hero_links_link_type', ['reference', 'custom']);
export const enum_pages_blocks_high_impact_hero_links_link_appearance = pgEnum('enum_pages_blocks_high_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum_pages_blocks_medium_impact_hero_links_link_type = pgEnum('enum_pages_blocks_medium_impact_hero_links_link_type', ['reference', 'custom']);
export const enum_pages_blocks_medium_impact_hero_links_link_appearance = pgEnum('enum_pages_blocks_medium_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum_pages_blocks_low_impact_hero_links_link_type = pgEnum('enum_pages_blocks_low_impact_hero_links_link_type', ['reference', 'custom']);
export const enum_pages_blocks_low_impact_hero_links_link_appearance = pgEnum('enum_pages_blocks_low_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum_pages_blocks_cta_links_link_type = pgEnum('enum_pages_blocks_cta_links_link_type', ['reference', 'custom']);
export const enum_pages_blocks_cta_links_link_appearance = pgEnum('enum_pages_blocks_cta_links_link_appearance', ['default', 'outline']);
export const enum_pages_blocks_content_columns_size = pgEnum('enum_pages_blocks_content_columns_size', ['oneThird', 'half', 'twoThirds', 'full']);
export const enum_pages_blocks_content_columns_link_type = pgEnum('enum_pages_blocks_content_columns_link_type', ['reference', 'custom']);
export const enum_pages_blocks_content_columns_link_appearance = pgEnum('enum_pages_blocks_content_columns_link_appearance', ['default', 'outline']);
export const enum_pages_blocks_archive_populate_by = pgEnum('enum_pages_blocks_archive_populate_by', ['collection', 'selection']);
export const enum_pages_blocks_archive_relation_to = pgEnum('enum_pages_blocks_archive_relation_to', ['posts']);
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published']);
export const enum__pages_v_blocks_high_impact_hero_links_link_type = pgEnum('enum__pages_v_blocks_high_impact_hero_links_link_type', ['reference', 'custom']);
export const enum__pages_v_blocks_high_impact_hero_links_link_appearance = pgEnum('enum__pages_v_blocks_high_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum__pages_v_blocks_medium_impact_hero_links_link_type = pgEnum('enum__pages_v_blocks_medium_impact_hero_links_link_type', ['reference', 'custom']);
export const enum__pages_v_blocks_medium_impact_hero_links_link_appearance = pgEnum('enum__pages_v_blocks_medium_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum__pages_v_blocks_low_impact_hero_links_link_type = pgEnum('enum__pages_v_blocks_low_impact_hero_links_link_type', ['reference', 'custom']);
export const enum__pages_v_blocks_low_impact_hero_links_link_appearance = pgEnum('enum__pages_v_blocks_low_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum__pages_v_blocks_cta_links_link_type = pgEnum('enum__pages_v_blocks_cta_links_link_type', ['reference', 'custom']);
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum('enum__pages_v_blocks_cta_links_link_appearance', ['default', 'outline']);
export const enum__pages_v_blocks_content_columns_size = pgEnum('enum__pages_v_blocks_content_columns_size', ['oneThird', 'half', 'twoThirds', 'full']);
export const enum__pages_v_blocks_content_columns_link_type = pgEnum('enum__pages_v_blocks_content_columns_link_type', ['reference', 'custom']);
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum('enum__pages_v_blocks_content_columns_link_appearance', ['default', 'outline']);
export const enum__pages_v_blocks_archive_populate_by = pgEnum('enum__pages_v_blocks_archive_populate_by', ['collection', 'selection']);
export const enum__pages_v_blocks_archive_relation_to = pgEnum('enum__pages_v_blocks_archive_relation_to', ['posts']);
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', ['draft', 'published']);
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published']);
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', ['draft', 'published']);
export const enum_events_type = pgEnum('enum_events_type', ['networking', 'businessBreakfast']);
export const enum_events_active = pgEnum('enum_events_active', ['false', 'true']);
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom']);
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', ['inline', 'schedulePublish']);
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', ['failed', 'succeeded']);
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', ['inline', 'schedulePublish']);
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', ['reference', 'custom']);
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', ['reference', 'custom']);

export const users = pgTable(
  'users',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', { mode: 'string', withTimezone: true, precision: 3 }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  columns => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
);

export const media = pgTable(
  'media',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  columns => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index('media_sizes_thumbnail_sizes_thumbnail_filename_idx').on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index('media_sizes_square_sizes_square_filename_idx').on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index('media_sizes_small_sizes_small_filename_idx').on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index('media_sizes_medium_sizes_medium_filename_idx').on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index('media_sizes_large_sizes_large_filename_idx').on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index('media_sizes_xlarge_sizes_xlarge_filename_idx').on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(columns.sizes_og_filename),
  }),
);

export const pages_blocks_high_impact_hero_links = pgTable(
  'pages_blocks_high_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_high_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_blocks_high_impact_hero_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_high_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_high_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_high_impact_hero.id],
      name: 'pages_blocks_high_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_high_impact_hero = pgTable(
  'pages_blocks_high_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_high_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_high_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_high_impact_hero_path_idx').on(columns._path),
    pages_blocks_high_impact_hero_media_idx: index('pages_blocks_high_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_high_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_medium_impact_hero_links = pgTable(
  'pages_blocks_medium_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_medium_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_blocks_medium_impact_hero_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_medium_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_medium_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_medium_impact_hero.id],
      name: 'pages_blocks_medium_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_medium_impact_hero = pgTable(
  'pages_blocks_medium_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_medium_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_medium_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_medium_impact_hero_path_idx').on(columns._path),
    pages_blocks_medium_impact_hero_media_idx: index('pages_blocks_medium_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_medium_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_low_impact_hero_links = pgTable(
  'pages_blocks_low_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_low_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_blocks_low_impact_hero_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_low_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_low_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_low_impact_hero.id],
      name: 'pages_blocks_low_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_low_impact_hero = pgTable(
  'pages_blocks_low_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_low_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_low_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_low_impact_hero_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_low_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages = pgTable(
  'pages',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    meta_title: varchar('meta_title'),
    meta_image: uuid('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  columns => ({
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
);

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
  },
  columns => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_high_impact_hero_links = pgTable(
  '_pages_v_blocks_high_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__pages_v_blocks_high_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__pages_v_blocks_high_impact_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_high_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_high_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_high_impact_hero.id],
      name: '_pages_v_blocks_high_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_high_impact_hero = pgTable(
  '_pages_v_blocks_high_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_high_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_high_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_high_impact_hero_path_idx').on(columns._path),
    _pages_v_blocks_high_impact_hero_media_idx: index('_pages_v_blocks_high_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_high_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_medium_impact_hero_links = pgTable(
  '_pages_v_blocks_medium_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__pages_v_blocks_medium_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__pages_v_blocks_medium_impact_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_medium_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_medium_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_medium_impact_hero.id],
      name: '_pages_v_blocks_medium_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_medium_impact_hero = pgTable(
  '_pages_v_blocks_medium_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_medium_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_medium_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_medium_impact_hero_path_idx').on(columns._path),
    _pages_v_blocks_medium_impact_hero_media_idx: index('_pages_v_blocks_medium_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_medium_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_low_impact_hero_links = pgTable(
  '_pages_v_blocks_low_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__pages_v_blocks_low_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__pages_v_blocks_low_impact_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_low_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_low_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_low_impact_hero.id],
      name: '_pages_v_blocks_low_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_low_impact_hero = pgTable(
  '_pages_v_blocks_low_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_low_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_low_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_low_impact_hero_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_low_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    parent: uuid('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: uuid('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_createdAt: timestamp('version_created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  columns => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_meta_version_meta_image_idx: index('_pages_v_version_meta_version_meta_image_idx').on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(columns.version_slug),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(columns.version_createdAt),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(columns.version__status),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
);

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
  },
  columns => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  columns => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts = pgTable(
  'posts',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    heroImage: uuid('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: uuid('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  columns => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
);

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
    usersID: uuid('users_id'),
  },
  columns => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    parent: uuid('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_heroImage: uuid('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: uuid('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_createdAt: timestamp('version_created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  columns => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(columns.version_heroImage),
    _posts_v_version_meta_version_meta_image_idx: index('_posts_v_version_meta_version_meta_image_idx').on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(columns.version_slug),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(columns.version_createdAt),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(columns.version__status),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
);

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
    usersID: uuid('users_id'),
  },
  columns => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(columns.categoriesID),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const categories = pgTable(
  'categories',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
);

export const attendees = pgTable(
  'attendees',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    email: varchar('email').notNull(),
    name: varchar('name'),
    event: uuid('event_id')
      .notNull()
      .references(() => events.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    attendees_email_idx: index('attendees_email_idx').on(columns.email),
    attendees_name_idx: index('attendees_name_idx').on(columns.name),
    attendees_event_idx: index('attendees_event_idx').on(columns.event),
    attendees_updated_at_idx: index('attendees_updated_at_idx').on(columns.updatedAt),
    attendees_created_at_idx: index('attendees_created_at_idx').on(columns.createdAt),
  }),
);

export const events = pgTable(
  'events',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title').notNull(),
    type: enum_events_type('type').notNull(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    active: enum_events_active('active').notNull().default('true'),
    location: varchar('location').notNull().default('Gravity Ruin Bar, ет.2, Бургас'),
    speakerName: varchar('speaker_name').notNull(),
    speakerQuote: varchar('speaker_quote'),
    maxGuests: varchar('max_guests').default(60),
    thumbnail: uuid('thumbnail_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    speakerCompanyLogo: uuid('speaker_company_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    events_title_idx: uniqueIndex('events_title_idx').on(columns.title),
    events_type_idx: index('events_type_idx').on(columns.type),
    events_date_idx: index('events_date_idx').on(columns.date),
    events_active_idx: index('events_active_idx').on(columns.active),
    events_location_idx: index('events_location_idx').on(columns.location),
    events_speaker_name_idx: index('events_speaker_name_idx').on(columns.speakerName),
    events_thumbnail_idx: index('events_thumbnail_idx').on(columns.thumbnail),
    events_speaker_company_logo_idx: index('events_speaker_company_logo_idx').on(columns.speakerCompanyLogo),
    events_updated_at_idx: index('events_updated_at_idx').on(columns.updatedAt),
    events_created_at_idx: index('events_created_at_idx').on(columns.createdAt),
  }),
);

export const redirects = pgTable(
  'redirects',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
);

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
  },
  columns => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  columns => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: uuid('users_id'),
    mediaID: uuid('media_id'),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
    attendeesID: uuid('attendees_id'),
    eventsID: uuid('events_id'),
    redirectsID: uuid('redirects_id'),
    'payload-jobsID': uuid('payload_jobs_id'),
  },
  columns => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index('payload_locked_documents_rels_users_id_idx').on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index('payload_locked_documents_rels_media_id_idx').on(columns.mediaID),
    payload_locked_documents_rels_pages_id_idx: index('payload_locked_documents_rels_pages_id_idx').on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index('payload_locked_documents_rels_posts_id_idx').on(columns.postsID),
    payload_locked_documents_rels_categories_id_idx: index('payload_locked_documents_rels_categories_id_idx').on(columns.categoriesID),
    payload_locked_documents_rels_attendees_id_idx: index('payload_locked_documents_rels_attendees_id_idx').on(columns.attendeesID),
    payload_locked_documents_rels_events_id_idx: index('payload_locked_documents_rels_events_id_idx').on(columns.eventsID),
    payload_locked_documents_rels_redirects_id_idx: index('payload_locked_documents_rels_redirects_id_idx').on(columns.redirectsID),
    payload_locked_documents_rels_payload_jobs_id_idx: index('payload_locked_documents_rels_payload_jobs_id_idx').on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    attendeesIdFk: foreignKey({
      columns: [columns['attendeesID']],
      foreignColumns: [attendees.id],
      name: 'payload_locked_documents_rels_attendees_fk',
    }).onDelete('cascade'),
    eventsIdFk: foreignKey({
      columns: [columns['eventsID']],
      foreignColumns: [events.id],
      name: 'payload_locked_documents_rels_events_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(columns.updatedAt),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: uuid('users_id'),
  },
  columns => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(columns.updatedAt),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(columns.createdAt),
  }),
);

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  columns => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const header = pgTable('header', {
  id: uuid('id').defaultRandom().primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
});

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
  },
  columns => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  columns => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const footer = pgTable('footer', {
  id: uuid('id').defaultRandom().primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
});

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
  },
  columns => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    footer_rels_posts_id_idx: index('footer_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'footer_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_pages_blocks_high_impact_hero_links = relations(pages_blocks_high_impact_hero_links, ({ one }) => ({
  _parentID: one(pages_blocks_high_impact_hero, {
    fields: [pages_blocks_high_impact_hero_links._parentID],
    references: [pages_blocks_high_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations_pages_blocks_high_impact_hero = relations(pages_blocks_high_impact_hero, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_high_impact_hero._parentID],
    references: [pages.id],
    relationName: '_blocks_HighImpactHero',
  }),
  links: many(pages_blocks_high_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [pages_blocks_high_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_pages_blocks_medium_impact_hero_links = relations(pages_blocks_medium_impact_hero_links, ({ one }) => ({
  _parentID: one(pages_blocks_medium_impact_hero, {
    fields: [pages_blocks_medium_impact_hero_links._parentID],
    references: [pages_blocks_medium_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations_pages_blocks_medium_impact_hero = relations(pages_blocks_medium_impact_hero, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_medium_impact_hero._parentID],
    references: [pages.id],
    relationName: '_blocks_MediumImpactHero',
  }),
  links: many(pages_blocks_medium_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [pages_blocks_medium_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_pages_blocks_low_impact_hero_links = relations(pages_blocks_low_impact_hero_links, ({ one }) => ({
  _parentID: one(pages_blocks_low_impact_hero, {
    fields: [pages_blocks_low_impact_hero_links._parentID],
    references: [pages_blocks_low_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations_pages_blocks_low_impact_hero = relations(pages_blocks_low_impact_hero, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_low_impact_hero._parentID],
    references: [pages.id],
    relationName: '_blocks_LowImpactHero',
  }),
  links: many(pages_blocks_low_impact_hero_links, {
    relationName: 'links',
  }),
}));
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}));
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}));
export const relations_pages_blocks_content_columns = relations(pages_blocks_content_columns, ({ one }) => ({
  _parentID: one(pages_blocks_content, {
    fields: [pages_blocks_content_columns._parentID],
    references: [pages_blocks_content.id],
    relationName: 'columns',
  }),
}));
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}));
export const relations_pages_blocks_media_block = relations(pages_blocks_media_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_media_block._parentID],
    references: [pages.id],
    relationName: '_blocks_mediaBlock',
  }),
  media: one(media, {
    fields: [pages_blocks_media_block.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}));
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  _blocks_HighImpactHero: many(pages_blocks_high_impact_hero, {
    relationName: '_blocks_HighImpactHero',
  }),
  _blocks_MediumImpactHero: many(pages_blocks_medium_impact_hero, {
    relationName: '_blocks_MediumImpactHero',
  }),
  _blocks_LowImpactHero: many(pages_blocks_low_impact_hero, {
    relationName: '_blocks_LowImpactHero',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}));
export const relations__pages_v_blocks_high_impact_hero_links = relations(_pages_v_blocks_high_impact_hero_links, ({ one }) => ({
  _parentID: one(_pages_v_blocks_high_impact_hero, {
    fields: [_pages_v_blocks_high_impact_hero_links._parentID],
    references: [_pages_v_blocks_high_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations__pages_v_blocks_high_impact_hero = relations(_pages_v_blocks_high_impact_hero, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_high_impact_hero._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_HighImpactHero',
  }),
  links: many(_pages_v_blocks_high_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [_pages_v_blocks_high_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations__pages_v_blocks_medium_impact_hero_links = relations(_pages_v_blocks_medium_impact_hero_links, ({ one }) => ({
  _parentID: one(_pages_v_blocks_medium_impact_hero, {
    fields: [_pages_v_blocks_medium_impact_hero_links._parentID],
    references: [_pages_v_blocks_medium_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations__pages_v_blocks_medium_impact_hero = relations(_pages_v_blocks_medium_impact_hero, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_medium_impact_hero._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_MediumImpactHero',
  }),
  links: many(_pages_v_blocks_medium_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [_pages_v_blocks_medium_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations__pages_v_blocks_low_impact_hero_links = relations(_pages_v_blocks_low_impact_hero_links, ({ one }) => ({
  _parentID: one(_pages_v_blocks_low_impact_hero, {
    fields: [_pages_v_blocks_low_impact_hero_links._parentID],
    references: [_pages_v_blocks_low_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations__pages_v_blocks_low_impact_hero = relations(_pages_v_blocks_low_impact_hero, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_low_impact_hero._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_LowImpactHero',
  }),
  links: many(_pages_v_blocks_low_impact_hero_links, {
    relationName: 'links',
  }),
}));
export const relations__pages_v_blocks_cta_links = relations(_pages_v_blocks_cta_links, ({ one }) => ({
  _parentID: one(_pages_v_blocks_cta, {
    fields: [_pages_v_blocks_cta_links._parentID],
    references: [_pages_v_blocks_cta.id],
    relationName: 'links',
  }),
}));
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}));
export const relations__pages_v_blocks_content_columns = relations(_pages_v_blocks_content_columns, ({ one }) => ({
  _parentID: one(_pages_v_blocks_content, {
    fields: [_pages_v_blocks_content_columns._parentID],
    references: [_pages_v_blocks_content.id],
    relationName: 'columns',
  }),
}));
export const relations__pages_v_blocks_content = relations(_pages_v_blocks_content, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_content._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_content',
  }),
  columns: many(_pages_v_blocks_content_columns, {
    relationName: 'columns',
  }),
}));
export const relations__pages_v_blocks_media_block = relations(_pages_v_blocks_media_block, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_media_block._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_mediaBlock',
  }),
  media: one(media, {
    fields: [_pages_v_blocks_media_block.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}));
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  _blocks_HighImpactHero: many(_pages_v_blocks_high_impact_hero, {
    relationName: '_blocks_HighImpactHero',
  }),
  _blocks_MediumImpactHero: many(_pages_v_blocks_medium_impact_hero, {
    relationName: '_blocks_MediumImpactHero',
  }),
  _blocks_LowImpactHero: many(_pages_v_blocks_low_impact_hero, {
    relationName: '_blocks_LowImpactHero',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}));
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}));
export const relations__posts_v_version_populated_authors = relations(_posts_v_version_populated_authors, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_version_populated_authors._parentID],
    references: [_posts_v.id],
    relationName: 'version_populatedAuthors',
  }),
}));
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_categories = relations(categories, () => ({}));
export const relations_attendees = relations(attendees, ({ one }) => ({
  event: one(events, {
    fields: [attendees.event],
    references: [events.id],
    relationName: 'event',
  }),
}));
export const relations_events = relations(events, ({ one }) => ({
  thumbnail: one(media, {
    fields: [events.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
  speakerCompanyLogo: one(media, {
    fields: [events.speakerCompanyLogo],
    references: [media.id],
    relationName: 'speakerCompanyLogo',
  }),
}));
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}));
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}));
export const relations_payload_locked_documents_rels = relations(payload_locked_documents_rels, ({ one }) => ({
  parent: one(payload_locked_documents, {
    fields: [payload_locked_documents_rels.parent],
    references: [payload_locked_documents.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [payload_locked_documents_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  mediaID: one(media, {
    fields: [payload_locked_documents_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
  pagesID: one(pages, {
    fields: [payload_locked_documents_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [payload_locked_documents_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [payload_locked_documents_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  attendeesID: one(attendees, {
    fields: [payload_locked_documents_rels.attendeesID],
    references: [attendees.id],
    relationName: 'attendees',
  }),
  eventsID: one(events, {
    fields: [payload_locked_documents_rels.eventsID],
    references: [events.id],
    relationName: 'events',
  }),
  redirectsID: one(redirects, {
    fields: [payload_locked_documents_rels.redirectsID],
    references: [redirects.id],
    relationName: 'redirects',
  }),
  'payload-jobsID': one(payload_jobs, {
    fields: [payload_locked_documents_rels['payload-jobsID']],
    references: [payload_jobs.id],
    relationName: 'payload-jobs',
  }),
}));
export const relations_payload_locked_documents = relations(payload_locked_documents, ({ many }) => ({
  _rels: many(payload_locked_documents_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_preferences_rels = relations(payload_preferences_rels, ({ one }) => ({
  parent: one(payload_preferences, {
    fields: [payload_preferences_rels.parent],
    references: [payload_preferences.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [payload_preferences_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}));
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}));
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}));
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}));

type DatabaseSchema = {
  enum_pages_blocks_high_impact_hero_links_link_type: typeof enum_pages_blocks_high_impact_hero_links_link_type;
  enum_pages_blocks_high_impact_hero_links_link_appearance: typeof enum_pages_blocks_high_impact_hero_links_link_appearance;
  enum_pages_blocks_medium_impact_hero_links_link_type: typeof enum_pages_blocks_medium_impact_hero_links_link_type;
  enum_pages_blocks_medium_impact_hero_links_link_appearance: typeof enum_pages_blocks_medium_impact_hero_links_link_appearance;
  enum_pages_blocks_low_impact_hero_links_link_type: typeof enum_pages_blocks_low_impact_hero_links_link_type;
  enum_pages_blocks_low_impact_hero_links_link_appearance: typeof enum_pages_blocks_low_impact_hero_links_link_appearance;
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type;
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance;
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size;
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type;
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance;
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by;
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_blocks_high_impact_hero_links_link_type: typeof enum__pages_v_blocks_high_impact_hero_links_link_type;
  enum__pages_v_blocks_high_impact_hero_links_link_appearance: typeof enum__pages_v_blocks_high_impact_hero_links_link_appearance;
  enum__pages_v_blocks_medium_impact_hero_links_link_type: typeof enum__pages_v_blocks_medium_impact_hero_links_link_type;
  enum__pages_v_blocks_medium_impact_hero_links_link_appearance: typeof enum__pages_v_blocks_medium_impact_hero_links_link_appearance;
  enum__pages_v_blocks_low_impact_hero_links_link_type: typeof enum__pages_v_blocks_low_impact_hero_links_link_type;
  enum__pages_v_blocks_low_impact_hero_links_link_appearance: typeof enum__pages_v_blocks_low_impact_hero_links_link_appearance;
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type;
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance;
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size;
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type;
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance;
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by;
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_posts_status: typeof enum_posts_status;
  enum__posts_v_version_status: typeof enum__posts_v_version_status;
  enum_events_type: typeof enum_events_type;
  enum_events_active: typeof enum_events_active;
  enum_redirects_to_type: typeof enum_redirects_to_type;
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug;
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state;
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug;
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type;
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type;
  users: typeof users;
  media: typeof media;
  pages_blocks_high_impact_hero_links: typeof pages_blocks_high_impact_hero_links;
  pages_blocks_high_impact_hero: typeof pages_blocks_high_impact_hero;
  pages_blocks_medium_impact_hero_links: typeof pages_blocks_medium_impact_hero_links;
  pages_blocks_medium_impact_hero: typeof pages_blocks_medium_impact_hero;
  pages_blocks_low_impact_hero_links: typeof pages_blocks_low_impact_hero_links;
  pages_blocks_low_impact_hero: typeof pages_blocks_low_impact_hero;
  pages_blocks_cta_links: typeof pages_blocks_cta_links;
  pages_blocks_cta: typeof pages_blocks_cta;
  pages_blocks_content_columns: typeof pages_blocks_content_columns;
  pages_blocks_content: typeof pages_blocks_content;
  pages_blocks_media_block: typeof pages_blocks_media_block;
  pages_blocks_archive: typeof pages_blocks_archive;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  _pages_v_blocks_high_impact_hero_links: typeof _pages_v_blocks_high_impact_hero_links;
  _pages_v_blocks_high_impact_hero: typeof _pages_v_blocks_high_impact_hero;
  _pages_v_blocks_medium_impact_hero_links: typeof _pages_v_blocks_medium_impact_hero_links;
  _pages_v_blocks_medium_impact_hero: typeof _pages_v_blocks_medium_impact_hero;
  _pages_v_blocks_low_impact_hero_links: typeof _pages_v_blocks_low_impact_hero_links;
  _pages_v_blocks_low_impact_hero: typeof _pages_v_blocks_low_impact_hero;
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links;
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta;
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns;
  _pages_v_blocks_content: typeof _pages_v_blocks_content;
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block;
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive;
  _pages_v: typeof _pages_v;
  _pages_v_rels: typeof _pages_v_rels;
  posts_populated_authors: typeof posts_populated_authors;
  posts: typeof posts;
  posts_rels: typeof posts_rels;
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors;
  _posts_v: typeof _posts_v;
  _posts_v_rels: typeof _posts_v_rels;
  categories: typeof categories;
  attendees: typeof attendees;
  events: typeof events;
  redirects: typeof redirects;
  redirects_rels: typeof redirects_rels;
  payload_jobs_log: typeof payload_jobs_log;
  payload_jobs: typeof payload_jobs;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  header_nav_items: typeof header_nav_items;
  header: typeof header;
  header_rels: typeof header_rels;
  footer_nav_items: typeof footer_nav_items;
  footer: typeof footer;
  footer_rels: typeof footer_rels;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_pages_blocks_high_impact_hero_links: typeof relations_pages_blocks_high_impact_hero_links;
  relations_pages_blocks_high_impact_hero: typeof relations_pages_blocks_high_impact_hero;
  relations_pages_blocks_medium_impact_hero_links: typeof relations_pages_blocks_medium_impact_hero_links;
  relations_pages_blocks_medium_impact_hero: typeof relations_pages_blocks_medium_impact_hero;
  relations_pages_blocks_low_impact_hero_links: typeof relations_pages_blocks_low_impact_hero_links;
  relations_pages_blocks_low_impact_hero: typeof relations_pages_blocks_low_impact_hero;
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links;
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta;
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns;
  relations_pages_blocks_content: typeof relations_pages_blocks_content;
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block;
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_blocks_high_impact_hero_links: typeof relations__pages_v_blocks_high_impact_hero_links;
  relations__pages_v_blocks_high_impact_hero: typeof relations__pages_v_blocks_high_impact_hero;
  relations__pages_v_blocks_medium_impact_hero_links: typeof relations__pages_v_blocks_medium_impact_hero_links;
  relations__pages_v_blocks_medium_impact_hero: typeof relations__pages_v_blocks_medium_impact_hero;
  relations__pages_v_blocks_low_impact_hero_links: typeof relations__pages_v_blocks_low_impact_hero_links;
  relations__pages_v_blocks_low_impact_hero: typeof relations__pages_v_blocks_low_impact_hero;
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links;
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta;
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns;
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content;
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block;
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_posts_populated_authors: typeof relations_posts_populated_authors;
  relations_posts_rels: typeof relations_posts_rels;
  relations_posts: typeof relations_posts;
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors;
  relations__posts_v_rels: typeof relations__posts_v_rels;
  relations__posts_v: typeof relations__posts_v;
  relations_categories: typeof relations_categories;
  relations_attendees: typeof relations_attendees;
  relations_events: typeof relations_events;
  relations_redirects_rels: typeof relations_redirects_rels;
  relations_redirects: typeof relations_redirects;
  relations_payload_jobs_log: typeof relations_payload_jobs_log;
  relations_payload_jobs: typeof relations_payload_jobs;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_header_nav_items: typeof relations_header_nav_items;
  relations_header_rels: typeof relations_header_rels;
  relations_header: typeof relations_header;
  relations_footer_nav_items: typeof relations_footer_nav_items;
  relations_footer_rels: typeof relations_footer_rels;
  relations_footer: typeof relations_footer;
};

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
