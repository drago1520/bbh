/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres';
import { pgTable, index, uniqueIndex, foreignKey, integer, uuid, varchar, timestamp, numeric, text, jsonb, boolean, serial, pgEnum } from '@payloadcms/db-postgres/drizzle/pg-core';
import { sql, relations } from '@payloadcms/db-postgres/drizzle';
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published']);
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', ['draft', 'published']);
export const enum_posts_blocks_high_impact_hero_links_link_type = pgEnum('enum_posts_blocks_high_impact_hero_links_link_type', ['reference', 'custom']);
export const enum_posts_blocks_high_impact_hero_links_link_appearance = pgEnum('enum_posts_blocks_high_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum_posts_blocks_medium_impact_hero_links_link_type = pgEnum('enum_posts_blocks_medium_impact_hero_links_link_type', ['reference', 'custom']);
export const enum_posts_blocks_medium_impact_hero_links_link_appearance = pgEnum('enum_posts_blocks_medium_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum_posts_blocks_low_impact_hero_links_link_type = pgEnum('enum_posts_blocks_low_impact_hero_links_link_type', ['reference', 'custom']);
export const enum_posts_blocks_low_impact_hero_links_link_appearance = pgEnum('enum_posts_blocks_low_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum_posts_blocks_cta_links_link_type = pgEnum('enum_posts_blocks_cta_links_link_type', ['reference', 'custom']);
export const enum_posts_blocks_cta_links_link_appearance = pgEnum('enum_posts_blocks_cta_links_link_appearance', ['default', 'outline']);
export const enum_posts_blocks_content_columns_size = pgEnum('enum_posts_blocks_content_columns_size', ['oneThird', 'half', 'twoThirds', 'full']);
export const enum_posts_blocks_content_columns_link_type = pgEnum('enum_posts_blocks_content_columns_link_type', ['reference', 'custom']);
export const enum_posts_blocks_content_columns_link_appearance = pgEnum('enum_posts_blocks_content_columns_link_appearance', ['default', 'outline']);
export const enum_posts_blocks_archive_populate_by = pgEnum('enum_posts_blocks_archive_populate_by', ['collection', 'selection']);
export const enum_posts_blocks_archive_relation_to = pgEnum('enum_posts_blocks_archive_relation_to', ['posts']);
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published']);
export const enum__posts_v_blocks_high_impact_hero_links_link_type = pgEnum('enum__posts_v_blocks_high_impact_hero_links_link_type', ['reference', 'custom']);
export const enum__posts_v_blocks_high_impact_hero_links_link_appearance = pgEnum('enum__posts_v_blocks_high_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum__posts_v_blocks_medium_impact_hero_links_link_type = pgEnum('enum__posts_v_blocks_medium_impact_hero_links_link_type', ['reference', 'custom']);
export const enum__posts_v_blocks_medium_impact_hero_links_link_appearance = pgEnum('enum__posts_v_blocks_medium_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum__posts_v_blocks_low_impact_hero_links_link_type = pgEnum('enum__posts_v_blocks_low_impact_hero_links_link_type', ['reference', 'custom']);
export const enum__posts_v_blocks_low_impact_hero_links_link_appearance = pgEnum('enum__posts_v_blocks_low_impact_hero_links_link_appearance', ['default', 'outline']);
export const enum__posts_v_blocks_cta_links_link_type = pgEnum('enum__posts_v_blocks_cta_links_link_type', ['reference', 'custom']);
export const enum__posts_v_blocks_cta_links_link_appearance = pgEnum('enum__posts_v_blocks_cta_links_link_appearance', ['default', 'outline']);
export const enum__posts_v_blocks_content_columns_size = pgEnum('enum__posts_v_blocks_content_columns_size', ['oneThird', 'half', 'twoThirds', 'full']);
export const enum__posts_v_blocks_content_columns_link_type = pgEnum('enum__posts_v_blocks_content_columns_link_type', ['reference', 'custom']);
export const enum__posts_v_blocks_content_columns_link_appearance = pgEnum('enum__posts_v_blocks_content_columns_link_appearance', ['default', 'outline']);
export const enum__posts_v_blocks_archive_populate_by = pgEnum('enum__posts_v_blocks_archive_populate_by', ['collection', 'selection']);
export const enum__posts_v_blocks_archive_relation_to = pgEnum('enum__posts_v_blocks_archive_relation_to', ['posts']);
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', ['draft', 'published']);
export const enum_events_type = pgEnum('enum_events_type', ['networking', 'businessBreakfast', 'conference', 'courses']);
export const enum_events_active = pgEnum('enum_events_active', ['false', 'true']);
export const enum_tickets_source = pgEnum('enum_tickets_source', ['stripe', 'manually']);
export const enum_homepage_status = pgEnum('enum_homepage_status', ['draft', 'published']);
export const enum__homepage_v_version_status = pgEnum('enum__homepage_v_version_status', ['draft', 'published']);
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom']);
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', ['inline', 'schedulePublish']);
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', ['failed', 'succeeded']);
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', ['inline', 'schedulePublish']);
export const enum_contacts_socials_platform = pgEnum('enum_contacts_socials_platform', ['facebook', 'instagram', 'twitter', 'linkedin', 'youtube', 'tiktok', 'whatsapp', 'telegram', 'viber', 'discord', 'snapchat', 'pinterest', 'reddit', 'twitch', 'medium', 'slack', 'skype', 'threads', 'yelp']);

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
  },
  columns => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const users = pgTable(
  'users',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', { mode: 'string', withTimezone: true, precision: 3 }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  columns => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
);

export const media = pgTable(
  'media',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  columns => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(columns.sizes_og_filename),
  }),
);

export const pages_blocks_q_a_block = pgTable(
  'pages_blocks_q_a_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    question: varchar('question'),
    answer: jsonb('answer'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_q_a_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_q_a_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_q_a_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_q_a_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_faq_chess_mate = pgTable(
  'pages_blocks_faq_chess_mate',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Често Задавани Въпроси'),
    helperText: jsonb('helper_text').default(sql`'{"root":{"children":[{"type":"paragraph","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Не откри твоя въпрос? ","type":"text","version":1},{"type":"link","url":"https://your-link-url.com","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Свържи се с нас","type":"text","version":1}],"version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":" и ще го добавим!","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"version":1}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'::jsonb`),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_faq_chess_mate_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_faq_chess_mate_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_faq_chess_mate_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_faq_chess_mate_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_gallery7 = pgTable(
  'pages_blocks_gallery7',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    heading: varchar('heading'),
    descr: jsonb('descr'),
    ctaText: varchar('cta_text'),
    ctaHref: varchar('cta_href'),
    rotateSpeed: numeric('rotate_speed'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_gallery7_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_gallery7_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_gallery7_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_gallery7_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_testimonial25_card_block = pgTable(
  'pages_blocks_testimonial25_card_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    image: uuid('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    quote: varchar('quote'),
    author: varchar('author'),
    role: varchar('role'),
    company: varchar('company'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_testimonial25_card_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonial25_card_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_testimonial25_card_block_path_idx').on(columns._path),
    pages_blocks_testimonial25_card_block_image_idx: index('pages_blocks_testimonial25_card_block_image_idx').on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_testimonial25_card_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_testimonial25_block = pgTable(
  'pages_blocks_testimonial25_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    helperText: varchar('helper_text'),
    ctaText: varchar('cta_text'),
    ctaHref: varchar('cta_href'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_testimonial25_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonial25_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_testimonial25_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_testimonial25_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_statistic = pgTable(
  'pages_blocks_statistic',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    icon: uuid('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    value: numeric('value'),
    suffix: varchar('suffix'),
    description: varchar('description'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_statistic_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_statistic_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_statistic_path_idx').on(columns._path),
    pages_blocks_statistic_icon_idx: index('pages_blocks_statistic_icon_idx').on(columns.icon),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_statistic_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_statistics = pgTable(
  'pages_blocks_statistics',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_statistics_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_statistics_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_statistics_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_statistics_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_agenda_items = pgTable(
  'pages_blocks_agenda_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_agenda_items_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_agenda_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_agenda.id],
      name: 'pages_blocks_agenda_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_agenda = pgTable(
  'pages_blocks_agenda',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_agenda_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_agenda_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_agenda_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_agenda_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_lecturers_lecturers = pgTable(
  'pages_blocks_lecturers_lecturers',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    role: varchar('role'),
    bio: varchar('bio'),
    image: uuid('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  columns => ({
    _orderIdx: index('pages_blocks_lecturers_lecturers_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_lecturers_lecturers_parent_id_idx').on(columns._parentID),
    pages_blocks_lecturers_lecturers_image_idx: index('pages_blocks_lecturers_lecturers_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_lecturers.id],
      name: 'pages_blocks_lecturers_lecturers_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_lecturers = pgTable(
  'pages_blocks_lecturers',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subheading: varchar('subheading'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_lecturers_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_lecturers_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_lecturers_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_lecturers_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_timeline_steps = pgTable(
  'pages_blocks_timeline_steps',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: varchar('icon'),
    title: varchar('title'),
    description: varchar('description'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_timeline_steps_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_timeline_steps_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_timeline.id],
      name: 'pages_blocks_timeline_steps_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_timeline = pgTable(
  'pages_blocks_timeline',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_timeline_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_timeline_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_timeline_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_timeline_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_who_is_the_conf_for_items = pgTable(
  'pages_blocks_who_is_the_conf_for_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: uuid('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_who_is_the_conf_for_items_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_who_is_the_conf_for_items_parent_id_idx').on(columns._parentID),
    pages_blocks_who_is_the_conf_for_items_icon_idx: index('pages_blocks_who_is_the_conf_for_items_icon_idx').on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_who_is_the_conf_for.id],
      name: 'pages_blocks_who_is_the_conf_for_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_who_is_the_conf_for = pgTable(
  'pages_blocks_who_is_the_conf_for',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subheading: varchar('subheading'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_who_is_the_conf_for_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_who_is_the_conf_for_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_who_is_the_conf_for_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_who_is_the_conf_for_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_pricing_with_countdown_plans_features = pgTable(
  'pages_blocks_pricing_with_countdown_plans_features',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_pricing_with_countdown_plans_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_pricing_with_countdown_plans_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_pricing_with_countdown_plans.id],
      name: 'pages_blocks_pricing_with_countdown_plans_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_pricing_with_countdown_plans = pgTable(
  'pages_blocks_pricing_with_countdown_plans',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    originalPrice: varchar('original_price'),
    discountedPrice: varchar('discounted_price'),
    discount: varchar('discount'),
    description: varchar('description'),
    active: boolean('active').default(false),
    bonus: varchar('bonus'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_pricing_with_countdown_plans_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_pricing_with_countdown_plans_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_pricing_with_countdown.id],
      name: 'pages_blocks_pricing_with_countdown_plans_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_pricing_with_countdown = pgTable(
  'pages_blocks_pricing_with_countdown',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label'),
    title: varchar('title'),
    subheading: varchar('subheading'),
    saleEnd: timestamp('sale_end', { mode: 'string', withTimezone: true, precision: 3 }),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_pricing_with_countdown_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_pricing_with_countdown_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_pricing_with_countdown_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_pricing_with_countdown_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_testimonials2_testimonials = pgTable(
  'pages_blocks_testimonials2_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    quote: varchar('quote'),
    clientName: varchar('client_name'),
    clientImg: uuid('client_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    workTitle: varchar('work_title'),
    title: varchar('title'),
    badge: varchar('badge'),
    cardImg: uuid('card_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  columns => ({
    _orderIdx: index('pages_blocks_testimonials2_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonials2_testimonials_parent_id_idx').on(columns._parentID),
    pages_blocks_testimonials2_testimonials_client_img_idx: index('pages_blocks_testimonials2_testimonials_client_img_idx').on(columns.clientImg),
    pages_blocks_testimonials2_testimonials_card_img_idx: index('pages_blocks_testimonials2_testimonials_card_img_idx').on(columns.cardImg),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_testimonials2.id],
      name: 'pages_blocks_testimonials2_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_testimonials2 = pgTable(
  'pages_blocks_testimonials2',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    subheading: varchar('subheading'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('pages_blocks_testimonials2_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonials2_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_testimonials2_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_testimonials2_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages = pgTable(
  'pages',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    ctaText: varchar('cta_text'),
    subheading: varchar('subheading'),
    emailTemplateId: varchar('email_template_id'),
    heroImg: uuid('hero_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: uuid('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  columns => ({
    pages_hero_img_idx: index('pages_hero_img_idx').on(columns.heroImg),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
);

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: uuid('media_id'),
  },
  columns => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_media_id_idx: index('pages_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'pages_rels_media_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_q_a_block = pgTable(
  '_pages_v_blocks_q_a_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    question: varchar('question'),
    answer: jsonb('answer'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_q_a_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_q_a_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_q_a_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_q_a_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_faq_chess_mate = pgTable(
  '_pages_v_blocks_faq_chess_mate',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title').default('Често Задавани Въпроси'),
    helperText: jsonb('helper_text').default(sql`'{"root":{"children":[{"type":"paragraph","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Не откри твоя въпрос? ","type":"text","version":1},{"type":"link","url":"https://your-link-url.com","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Свържи се с нас","type":"text","version":1}],"version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":" и ще го добавим!","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"version":1}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'::jsonb`),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_faq_chess_mate_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_faq_chess_mate_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_faq_chess_mate_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_faq_chess_mate_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_gallery7 = pgTable(
  '_pages_v_blocks_gallery7',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    heading: varchar('heading'),
    descr: jsonb('descr'),
    ctaText: varchar('cta_text'),
    ctaHref: varchar('cta_href'),
    rotateSpeed: numeric('rotate_speed'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_gallery7_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_gallery7_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_gallery7_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_gallery7_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_testimonial25_card_block = pgTable(
  '_pages_v_blocks_testimonial25_card_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    image: uuid('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    quote: varchar('quote'),
    author: varchar('author'),
    role: varchar('role'),
    company: varchar('company'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_testimonial25_card_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_testimonial25_card_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_testimonial25_card_block_path_idx').on(columns._path),
    _pages_v_blocks_testimonial25_card_block_image_idx: index('_pages_v_blocks_testimonial25_card_block_image_idx').on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_testimonial25_card_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_testimonial25_block = pgTable(
  '_pages_v_blocks_testimonial25_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    helperText: varchar('helper_text'),
    ctaText: varchar('cta_text'),
    ctaHref: varchar('cta_href'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_testimonial25_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_testimonial25_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_testimonial25_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_testimonial25_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_statistic = pgTable(
  '_pages_v_blocks_statistic',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    icon: uuid('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    value: numeric('value'),
    suffix: varchar('suffix'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_statistic_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_statistic_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_statistic_path_idx').on(columns._path),
    _pages_v_blocks_statistic_icon_idx: index('_pages_v_blocks_statistic_icon_idx').on(columns.icon),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_statistic_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_statistics = pgTable(
  '_pages_v_blocks_statistics',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_statistics_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_statistics_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_statistics_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_statistics_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_agenda_items = pgTable(
  '_pages_v_blocks_agenda_items',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_agenda_items_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_agenda_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_agenda.id],
      name: '_pages_v_blocks_agenda_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_agenda = pgTable(
  '_pages_v_blocks_agenda',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_agenda_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_agenda_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_agenda_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_agenda_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_lecturers_lecturers = pgTable(
  '_pages_v_blocks_lecturers_lecturers',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name'),
    role: varchar('role'),
    bio: varchar('bio'),
    image: uuid('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_lecturers_lecturers_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_lecturers_lecturers_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_lecturers_lecturers_image_idx: index('_pages_v_blocks_lecturers_lecturers_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_lecturers.id],
      name: '_pages_v_blocks_lecturers_lecturers_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_lecturers = pgTable(
  '_pages_v_blocks_lecturers',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    subheading: varchar('subheading'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_lecturers_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_lecturers_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_lecturers_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_lecturers_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_timeline_steps = pgTable(
  '_pages_v_blocks_timeline_steps',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    icon: varchar('icon'),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_timeline_steps_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_timeline_steps_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_timeline.id],
      name: '_pages_v_blocks_timeline_steps_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_timeline = pgTable(
  '_pages_v_blocks_timeline',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_timeline_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_timeline_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_timeline_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_timeline_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_who_is_the_conf_for_items = pgTable(
  '_pages_v_blocks_who_is_the_conf_for_items',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    icon: uuid('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    title: varchar('title'),
    description: varchar('description'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_who_is_the_conf_for_items_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_who_is_the_conf_for_items_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_who_is_the_conf_for_items_icon_idx: index('_pages_v_blocks_who_is_the_conf_for_items_icon_idx').on(columns.icon),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_who_is_the_conf_for.id],
      name: '_pages_v_blocks_who_is_the_conf_for_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_who_is_the_conf_for = pgTable(
  '_pages_v_blocks_who_is_the_conf_for',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    subheading: varchar('subheading'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_who_is_the_conf_for_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_who_is_the_conf_for_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_who_is_the_conf_for_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_who_is_the_conf_for_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_pricing_with_countdown_plans_features = pgTable(
  '_pages_v_blocks_pricing_with_countdown_plans_features',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    feature: varchar('feature'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_pricing_with_countdown_plans_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_pricing_with_countdown_plans_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_pricing_with_countdown_plans.id],
      name: '_pages_v_blocks_pricing_with_countdown_plans_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_pricing_with_countdown_plans = pgTable(
  '_pages_v_blocks_pricing_with_countdown_plans',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    originalPrice: varchar('original_price'),
    discountedPrice: varchar('discounted_price'),
    discount: varchar('discount'),
    description: varchar('description'),
    active: boolean('active').default(false),
    bonus: varchar('bonus'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_pricing_with_countdown_plans_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_pricing_with_countdown_plans_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_pricing_with_countdown.id],
      name: '_pages_v_blocks_pricing_with_countdown_plans_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_pricing_with_countdown = pgTable(
  '_pages_v_blocks_pricing_with_countdown',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    label: varchar('label'),
    title: varchar('title'),
    subheading: varchar('subheading'),
    saleEnd: timestamp('sale_end', { mode: 'string', withTimezone: true, precision: 3 }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_pricing_with_countdown_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_pricing_with_countdown_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_pricing_with_countdown_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_pricing_with_countdown_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_testimonials2_testimonials = pgTable(
  '_pages_v_blocks_testimonials2_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    quote: varchar('quote'),
    clientName: varchar('client_name'),
    clientImg: uuid('client_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    workTitle: varchar('work_title'),
    title: varchar('title'),
    badge: varchar('badge'),
    cardImg: uuid('card_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_testimonials2_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_testimonials2_testimonials_parent_id_idx').on(columns._parentID),
    _pages_v_blocks_testimonials2_testimonials_client_img_idx: index('_pages_v_blocks_testimonials2_testimonials_client_img_idx').on(columns.clientImg),
    _pages_v_blocks_testimonials2_testimonials_card_img_idx: index('_pages_v_blocks_testimonials2_testimonials_card_img_idx').on(columns.cardImg),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_testimonials2.id],
      name: '_pages_v_blocks_testimonials2_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_testimonials2 = pgTable(
  '_pages_v_blocks_testimonials2',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    subheading: varchar('subheading'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_pages_v_blocks_testimonials2_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_testimonials2_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_testimonials2_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_testimonials2_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    parent: uuid('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_ctaText: varchar('version_cta_text'),
    version_subheading: varchar('version_subheading'),
    version_emailTemplateId: varchar('version_email_template_id'),
    version_heroImg: uuid('version_hero_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: uuid('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_createdAt: timestamp('version_created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  columns => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_hero_img_idx: index('_pages_v_version_version_hero_img_idx').on(columns.version_heroImg),
    _pages_v_version_meta_version_meta_image_idx: index('_pages_v_version_meta_version_meta_image_idx').on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(columns.version_slug),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(columns.version_createdAt),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(columns.version__status),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
);

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: uuid('media_id'),
  },
  columns => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_media_id_idx: index('_pages_v_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: '_pages_v_rels_media_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  columns => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_high_impact_hero_links = pgTable(
  'posts_blocks_high_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_posts_blocks_high_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_posts_blocks_high_impact_hero_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_high_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_high_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts_blocks_high_impact_hero.id],
      name: 'posts_blocks_high_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_high_impact_hero = pgTable(
  'posts_blocks_high_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_high_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_high_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_high_impact_hero_path_idx').on(columns._path),
    posts_blocks_high_impact_hero_media_idx: index('posts_blocks_high_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_high_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_medium_impact_hero_links = pgTable(
  'posts_blocks_medium_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_posts_blocks_medium_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_posts_blocks_medium_impact_hero_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_medium_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_medium_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts_blocks_medium_impact_hero.id],
      name: 'posts_blocks_medium_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_medium_impact_hero = pgTable(
  'posts_blocks_medium_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_medium_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_medium_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_medium_impact_hero_path_idx').on(columns._path),
    posts_blocks_medium_impact_hero_media_idx: index('posts_blocks_medium_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_medium_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_low_impact_hero_links = pgTable(
  'posts_blocks_low_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_posts_blocks_low_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_posts_blocks_low_impact_hero_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_low_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_low_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts_blocks_low_impact_hero.id],
      name: 'posts_blocks_low_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_low_impact_hero = pgTable(
  'posts_blocks_low_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_low_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_low_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_low_impact_hero_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_low_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_cta_links = pgTable(
  'posts_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_posts_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_posts_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts_blocks_cta.id],
      name: 'posts_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_cta = pgTable(
  'posts_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_content_columns = pgTable(
  'posts_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_posts_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_posts_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_posts_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts_blocks_content.id],
      name: 'posts_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_content = pgTable(
  'posts_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_media_block = pgTable(
  'posts_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_media_block_path_idx').on(columns._path),
    posts_blocks_media_block_media_idx: index('posts_blocks_media_block_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_archive = pgTable(
  'posts_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_posts_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_posts_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_q_a_block = pgTable(
  'posts_blocks_q_a_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    question: varchar('question'),
    answer: jsonb('answer'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_q_a_block_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_q_a_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_q_a_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_q_a_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts_blocks_faq_chess_mate = pgTable(
  'posts_blocks_faq_chess_mate',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title').default('Често Задавани Въпроси'),
    helperText: jsonb('helper_text').default(sql`'{"root":{"children":[{"type":"paragraph","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Не откри твоя въпрос? ","type":"text","version":1},{"type":"link","url":"https://your-link-url.com","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Свържи се с нас","type":"text","version":1}],"version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":" и ще го добавим!","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"version":1}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'::jsonb`),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('posts_blocks_faq_chess_mate_order_idx').on(columns._order),
    _parentIDIdx: index('posts_blocks_faq_chess_mate_parent_id_idx').on(columns._parentID),
    _pathIdx: index('posts_blocks_faq_chess_mate_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_blocks_faq_chess_mate_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const posts = pgTable(
  'posts',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    heroImage: uuid('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: uuid('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  columns => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
);

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
    usersID: uuid('users_id'),
    pagesID: uuid('pages_id'),
  },
  columns => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    posts_rels_pages_id_idx: index('posts_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'posts_rels_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_high_impact_hero_links = pgTable(
  '_posts_v_blocks_high_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__posts_v_blocks_high_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__posts_v_blocks_high_impact_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_high_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_high_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v_blocks_high_impact_hero.id],
      name: '_posts_v_blocks_high_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_high_impact_hero = pgTable(
  '_posts_v_blocks_high_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_high_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_high_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_high_impact_hero_path_idx').on(columns._path),
    _posts_v_blocks_high_impact_hero_media_idx: index('_posts_v_blocks_high_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_high_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_medium_impact_hero_links = pgTable(
  '_posts_v_blocks_medium_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__posts_v_blocks_medium_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__posts_v_blocks_medium_impact_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_medium_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_medium_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v_blocks_medium_impact_hero.id],
      name: '_posts_v_blocks_medium_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_medium_impact_hero = pgTable(
  '_posts_v_blocks_medium_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_medium_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_medium_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_medium_impact_hero_path_idx').on(columns._path),
    _posts_v_blocks_medium_impact_hero_media_idx: index('_posts_v_blocks_medium_impact_hero_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_medium_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_low_impact_hero_links = pgTable(
  '_posts_v_blocks_low_impact_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__posts_v_blocks_low_impact_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__posts_v_blocks_low_impact_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_low_impact_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_low_impact_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v_blocks_low_impact_hero.id],
      name: '_posts_v_blocks_low_impact_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_low_impact_hero = pgTable(
  '_posts_v_blocks_low_impact_hero',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_low_impact_hero_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_low_impact_hero_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_low_impact_hero_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_low_impact_hero_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_cta_links = pgTable(
  '_posts_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    link_type: enum__posts_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__posts_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v_blocks_cta.id],
      name: '_posts_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_cta = pgTable(
  '_posts_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_content_columns = pgTable(
  '_posts_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    size: enum__posts_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__posts_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum__posts_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v_blocks_content.id],
      name: '_posts_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_content = pgTable(
  '_posts_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_media_block = pgTable(
  '_posts_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    media: uuid('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_media_block_path_idx').on(columns._path),
    _posts_v_blocks_media_block_media_idx: index('_posts_v_blocks_media_block_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_archive = pgTable(
  '_posts_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__posts_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__posts_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_q_a_block = pgTable(
  '_posts_v_blocks_q_a_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    question: varchar('question'),
    answer: jsonb('answer'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_q_a_block_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_q_a_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_q_a_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_q_a_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v_blocks_faq_chess_mate = pgTable(
  '_posts_v_blocks_faq_chess_mate',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title').default('Често Задавани Въпроси'),
    helperText: jsonb('helper_text').default(sql`'{"root":{"children":[{"type":"paragraph","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Не откри твоя въпрос? ","type":"text","version":1},{"type":"link","url":"https://your-link-url.com","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Свържи се с нас","type":"text","version":1}],"version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":" и ще го добавим!","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"version":1}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'::jsonb`),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('_posts_v_blocks_faq_chess_mate_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_blocks_faq_chess_mate_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_posts_v_blocks_faq_chess_mate_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_blocks_faq_chess_mate_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    parent: uuid('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_heroImage: uuid('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: uuid('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_createdAt: timestamp('version_created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  columns => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(columns.version_heroImage),
    _posts_v_version_meta_version_meta_image_idx: index('_posts_v_version_meta_version_meta_image_idx').on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(columns.version_slug),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(columns.version_createdAt),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(columns.version__status),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
);

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
    usersID: uuid('users_id'),
    pagesID: uuid('pages_id'),
  },
  columns => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(columns.categoriesID),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    _posts_v_rels_pages_id_idx: index('_posts_v_rels_pages_id_idx').on(columns.pagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_posts_v_rels_pages_fk',
    }).onDelete('cascade'),
  }),
);

export const categories = pgTable(
  'categories',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
);

export const attendees = pgTable(
  'attendees',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    email: varchar('email'),
    name: varchar('name'),
    phone: varchar('phone'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    attendees_email_idx: uniqueIndex('attendees_email_idx').on(columns.email),
    attendees_name_idx: uniqueIndex('attendees_name_idx').on(columns.name),
    attendees_phone_idx: uniqueIndex('attendees_phone_idx').on(columns.phone),
    attendees_updated_at_idx: index('attendees_updated_at_idx').on(columns.updatedAt),
    attendees_created_at_idx: index('attendees_created_at_idx').on(columns.createdAt),
  }),
);

export const events = pgTable(
  'events',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title').notNull(),
    description: jsonb('description').notNull(),
    shortDescription: jsonb('short_description'),
    stripeUrl: varchar('stripe_url'),
    type: enum_events_type('type').notNull(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    active: enum_events_active('active').notNull().default('true'),
    speakerName: varchar('speaker_name').notNull(),
    maxGuests: varchar('max_guests').default('60'),
    thumbnail: uuid('thumbnail_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    location: varchar('location').default('Gravity Ruin Bar, ет.2, Бургас'),
    locationUrl: varchar('location_url').default('https://maps.app.goo.gl/FSebWqtrExL7ZdfFA'),
    locationImg: uuid('location_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    events_title_idx: uniqueIndex('events_title_idx').on(columns.title),
    events_type_idx: index('events_type_idx').on(columns.type),
    events_date_idx: index('events_date_idx').on(columns.date),
    events_active_idx: index('events_active_idx').on(columns.active),
    events_speaker_name_idx: index('events_speaker_name_idx').on(columns.speakerName),
    events_thumbnail_idx: index('events_thumbnail_idx').on(columns.thumbnail),
    events_location_idx: index('events_location_idx').on(columns.location),
    events_location_url_idx: index('events_location_url_idx').on(columns.locationUrl),
    events_location_img_idx: index('events_location_img_idx').on(columns.locationImg),
    events_updated_at_idx: index('events_updated_at_idx').on(columns.updatedAt),
    events_created_at_idx: index('events_created_at_idx').on(columns.createdAt),
  }),
);

export const marketing_sections_blocks_partners = pgTable(
  'marketing_sections_blocks_partners',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('marketing_sections_blocks_partners_order_idx').on(columns._order),
    _parentIDIdx: index('marketing_sections_blocks_partners_parent_id_idx').on(columns._parentID),
    _pathIdx: index('marketing_sections_blocks_partners_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [marketing_sections.id],
      name: 'marketing_sections_blocks_partners_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const marketing_sections_blocks_partners2 = pgTable(
  'marketing_sections_blocks_partners2',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    subtitle: varchar('subtitle'),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('marketing_sections_blocks_partners2_order_idx').on(columns._order),
    _parentIDIdx: index('marketing_sections_blocks_partners2_parent_id_idx').on(columns._parentID),
    _pathIdx: index('marketing_sections_blocks_partners2_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [marketing_sections.id],
      name: 'marketing_sections_blocks_partners2_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const marketing_sections = pgTable(
  'marketing_sections',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    marketing_sections_updated_at_idx: index('marketing_sections_updated_at_idx').on(columns.updatedAt),
    marketing_sections_created_at_idx: index('marketing_sections_created_at_idx').on(columns.createdAt),
  }),
);

export const marketing_sections_rels = pgTable(
  'marketing_sections_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: uuid('media_id'),
  },
  columns => ({
    order: index('marketing_sections_rels_order_idx').on(columns.order),
    parentIdx: index('marketing_sections_rels_parent_idx').on(columns.parent),
    pathIdx: index('marketing_sections_rels_path_idx').on(columns.path),
    marketing_sections_rels_media_id_idx: index('marketing_sections_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [marketing_sections.id],
      name: 'marketing_sections_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'marketing_sections_rels_media_fk',
    }).onDelete('cascade'),
  }),
);

export const partners_blocks_partners = pgTable(
  'partners_blocks_partners',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('partners_blocks_partners_order_idx').on(columns._order),
    _parentIDIdx: index('partners_blocks_partners_parent_id_idx').on(columns._parentID),
    _pathIdx: index('partners_blocks_partners_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [partners.id],
      name: 'partners_blocks_partners_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const partners = pgTable(
  'partners',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    partners_updated_at_idx: index('partners_updated_at_idx').on(columns.updatedAt),
    partners_created_at_idx: index('partners_created_at_idx').on(columns.createdAt),
  }),
);

export const partners_rels = pgTable(
  'partners_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: uuid('media_id'),
  },
  columns => ({
    order: index('partners_rels_order_idx').on(columns.order),
    parentIdx: index('partners_rels_parent_idx').on(columns.parent),
    pathIdx: index('partners_rels_path_idx').on(columns.path),
    partners_rels_media_id_idx: index('partners_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [partners.id],
      name: 'partners_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'partners_rels_media_fk',
    }).onDelete('cascade'),
  }),
);

export const partners2 = pgTable(
  'partners2',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    label: varchar('label').notNull().default('Партньори2'),
    subtitle: varchar('subtitle'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    partners2_updated_at_idx: index('partners2_updated_at_idx').on(columns.updatedAt),
    partners2_created_at_idx: index('partners2_created_at_idx').on(columns.createdAt),
  }),
);

export const partners2_rels = pgTable(
  'partners2_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: uuid('media_id'),
  },
  columns => ({
    order: index('partners2_rels_order_idx').on(columns.order),
    parentIdx: index('partners2_rels_parent_idx').on(columns.parent),
    pathIdx: index('partners2_rels_path_idx').on(columns.path),
    partners2_rels_media_id_idx: index('partners2_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [partners2.id],
      name: 'partners2_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'partners2_rels_media_fk',
    }).onDelete('cascade'),
  }),
);

export const tickets = pgTable(
  'tickets',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    attendee: uuid('attendee_id')
      .notNull()
      .references(() => attendees.id, {
        onDelete: 'set null',
      }),
    event: uuid('event_id')
      .notNull()
      .references(() => events.id, {
        onDelete: 'set null',
      }),
    source: enum_tickets_source('source').notNull().default('manually'),
    paymentIntentId: varchar('payment_intent_id'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    tickets_attendee_idx: index('tickets_attendee_idx').on(columns.attendee),
    tickets_event_idx: index('tickets_event_idx').on(columns.event),
    tickets_updated_at_idx: index('tickets_updated_at_idx').on(columns.updatedAt),
    tickets_created_at_idx: index('tickets_created_at_idx').on(columns.createdAt),
  }),
);

export const homepage = pgTable(
  'homepage',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    title: varchar('title'),
    subheading: varchar('subheading'),
    heroImg: uuid('hero_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: uuid('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    _status: enum_homepage_status('_status').default('draft'),
  },
  columns => ({
    homepage_hero_img_idx: index('homepage_hero_img_idx').on(columns.heroImg),
    homepage_meta_meta_image_idx: index('homepage_meta_meta_image_idx').on(columns.meta_image),
    homepage_slug_idx: index('homepage_slug_idx').on(columns.slug),
    homepage_updated_at_idx: index('homepage_updated_at_idx').on(columns.updatedAt),
    homepage_created_at_idx: index('homepage_created_at_idx').on(columns.createdAt),
    homepage__status_idx: index('homepage__status_idx').on(columns._status),
  }),
);

export const homepage_rels = pgTable(
  'homepage_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    faqLeftRightID: uuid('faq_left_right_id'),
    homepageGalleryID: uuid('homepage_gallery_id'),
    homepageTestimonial25ID: uuid('homepage_testimonial25_id'),
    statisticsNID: uuid('statistics_n_id'),
  },
  columns => ({
    order: index('homepage_rels_order_idx').on(columns.order),
    parentIdx: index('homepage_rels_parent_idx').on(columns.parent),
    pathIdx: index('homepage_rels_path_idx').on(columns.path),
    homepage_rels_faq_left_right_id_idx: index('homepage_rels_faq_left_right_id_idx').on(columns.faqLeftRightID),
    homepage_rels_homepage_gallery_id_idx: index('homepage_rels_homepage_gallery_id_idx').on(columns.homepageGalleryID),
    homepage_rels_homepage_testimonial25_id_idx: index('homepage_rels_homepage_testimonial25_id_idx').on(columns.homepageTestimonial25ID),
    homepage_rels_statistics_n_id_idx: index('homepage_rels_statistics_n_id_idx').on(columns.statisticsNID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [homepage.id],
      name: 'homepage_rels_parent_fk',
    }).onDelete('cascade'),
    faqLeftRightIdFk: foreignKey({
      columns: [columns['faqLeftRightID']],
      foreignColumns: [faq_left_right.id],
      name: 'homepage_rels_faq_left_right_fk',
    }).onDelete('cascade'),
    homepageGalleryIdFk: foreignKey({
      columns: [columns['homepageGalleryID']],
      foreignColumns: [homepage_gallery.id],
      name: 'homepage_rels_homepage_gallery_fk',
    }).onDelete('cascade'),
    homepageTestimonial25IdFk: foreignKey({
      columns: [columns['homepageTestimonial25ID']],
      foreignColumns: [homepage_testimonial25.id],
      name: 'homepage_rels_homepage_testimonial25_fk',
    }).onDelete('cascade'),
    statisticsNIdFk: foreignKey({
      columns: [columns['statisticsNID']],
      foreignColumns: [statistics_n.id],
      name: 'homepage_rels_statistics_n_fk',
    }).onDelete('cascade'),
  }),
);

export const _homepage_v = pgTable(
  '_homepage_v',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    parent: uuid('parent_id').references(() => homepage.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_subheading: varchar('version_subheading'),
    version_heroImg: uuid('version_hero_img_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: uuid('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version_createdAt: timestamp('version_created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    version__status: enum__homepage_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  columns => ({
    _homepage_v_parent_idx: index('_homepage_v_parent_idx').on(columns.parent),
    _homepage_v_version_version_hero_img_idx: index('_homepage_v_version_version_hero_img_idx').on(columns.version_heroImg),
    _homepage_v_version_meta_version_meta_image_idx: index('_homepage_v_version_meta_version_meta_image_idx').on(columns.version_meta_image),
    _homepage_v_version_version_slug_idx: index('_homepage_v_version_version_slug_idx').on(columns.version_slug),
    _homepage_v_version_version_updated_at_idx: index('_homepage_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    _homepage_v_version_version_created_at_idx: index('_homepage_v_version_version_created_at_idx').on(columns.version_createdAt),
    _homepage_v_version_version__status_idx: index('_homepage_v_version_version__status_idx').on(columns.version__status),
    _homepage_v_created_at_idx: index('_homepage_v_created_at_idx').on(columns.createdAt),
    _homepage_v_updated_at_idx: index('_homepage_v_updated_at_idx').on(columns.updatedAt),
    _homepage_v_latest_idx: index('_homepage_v_latest_idx').on(columns.latest),
    _homepage_v_autosave_idx: index('_homepage_v_autosave_idx').on(columns.autosave),
  }),
);

export const _homepage_v_rels = pgTable(
  '_homepage_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    faqLeftRightID: uuid('faq_left_right_id'),
    homepageGalleryID: uuid('homepage_gallery_id'),
    homepageTestimonial25ID: uuid('homepage_testimonial25_id'),
    statisticsNID: uuid('statistics_n_id'),
  },
  columns => ({
    order: index('_homepage_v_rels_order_idx').on(columns.order),
    parentIdx: index('_homepage_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_homepage_v_rels_path_idx').on(columns.path),
    _homepage_v_rels_faq_left_right_id_idx: index('_homepage_v_rels_faq_left_right_id_idx').on(columns.faqLeftRightID),
    _homepage_v_rels_homepage_gallery_id_idx: index('_homepage_v_rels_homepage_gallery_id_idx').on(columns.homepageGalleryID),
    _homepage_v_rels_homepage_testimonial25_id_idx: index('_homepage_v_rels_homepage_testimonial25_id_idx').on(columns.homepageTestimonial25ID),
    _homepage_v_rels_statistics_n_id_idx: index('_homepage_v_rels_statistics_n_id_idx').on(columns.statisticsNID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_homepage_v.id],
      name: '_homepage_v_rels_parent_fk',
    }).onDelete('cascade'),
    faqLeftRightIdFk: foreignKey({
      columns: [columns['faqLeftRightID']],
      foreignColumns: [faq_left_right.id],
      name: '_homepage_v_rels_faq_left_right_fk',
    }).onDelete('cascade'),
    homepageGalleryIdFk: foreignKey({
      columns: [columns['homepageGalleryID']],
      foreignColumns: [homepage_gallery.id],
      name: '_homepage_v_rels_homepage_gallery_fk',
    }).onDelete('cascade'),
    homepageTestimonial25IdFk: foreignKey({
      columns: [columns['homepageTestimonial25ID']],
      foreignColumns: [homepage_testimonial25.id],
      name: '_homepage_v_rels_homepage_testimonial25_fk',
    }).onDelete('cascade'),
    statisticsNIdFk: foreignKey({
      columns: [columns['statisticsNID']],
      foreignColumns: [statistics_n.id],
      name: '_homepage_v_rels_statistics_n_fk',
    }).onDelete('cascade'),
  }),
);

export const homepage_gallery = pgTable(
  'homepage_gallery',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    label: varchar('label').notNull().default('Секция галерия'),
    heading: varchar('heading').notNull(),
    descr: jsonb('descr'),
    ctaText: varchar('cta_text'),
    ctaHref: varchar('cta_href'),
    rotateSpeed: numeric('rotate_speed'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    homepage_gallery_updated_at_idx: index('homepage_gallery_updated_at_idx').on(columns.updatedAt),
    homepage_gallery_created_at_idx: index('homepage_gallery_created_at_idx').on(columns.createdAt),
  }),
);

export const homepage_gallery_rels = pgTable(
  'homepage_gallery_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: uuid('media_id'),
  },
  columns => ({
    order: index('homepage_gallery_rels_order_idx').on(columns.order),
    parentIdx: index('homepage_gallery_rels_parent_idx').on(columns.parent),
    pathIdx: index('homepage_gallery_rels_path_idx').on(columns.path),
    homepage_gallery_rels_media_id_idx: index('homepage_gallery_rels_media_id_idx').on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [homepage_gallery.id],
      name: 'homepage_gallery_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'homepage_gallery_rels_media_fk',
    }).onDelete('cascade'),
  }),
);

export const homepage_testimonial25_blocks_testimonial25_card_block = pgTable(
  'homepage_testimonial25_blocks_testimonial25_card_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    image: uuid('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    quote: varchar('quote').notNull(),
    author: varchar('author').notNull(),
    role: varchar('role').notNull(),
    company: varchar('company').notNull(),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('homepage_testimonial25_blocks_testimonial25_card_block_order_idx').on(columns._order),
    _parentIDIdx: index('homepage_testimonial25_blocks_testimonial25_card_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('homepage_testimonial25_blocks_testimonial25_card_block_path_idx').on(columns._path),
    homepage_testimonial25_blocks_testimonial25_card_block_i_idx: index('homepage_testimonial25_blocks_testimonial25_card_block_i_idx').on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [homepage_testimonial25.id],
      name: 'homepage_testimonial25_blocks_testimonial25_card_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const homepage_testimonial25 = pgTable(
  'homepage_testimonial25',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    label: varchar('label').notNull().default('Секция препоръки'),
    title: varchar('title').notNull(),
    helperText: varchar('helper_text'),
    ctaText: varchar('cta_text'),
    ctaHref: varchar('cta_href'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    homepage_testimonial25_updated_at_idx: index('homepage_testimonial25_updated_at_idx').on(columns.updatedAt),
    homepage_testimonial25_created_at_idx: index('homepage_testimonial25_created_at_idx').on(columns.createdAt),
  }),
);

export const statistics_n_blocks_statistic = pgTable(
  'statistics_n_blocks_statistic',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    icon: uuid('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    value: numeric('value').notNull(),
    suffix: varchar('suffix'),
    description: varchar('description').notNull(),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('statistics_n_blocks_statistic_order_idx').on(columns._order),
    _parentIDIdx: index('statistics_n_blocks_statistic_parent_id_idx').on(columns._parentID),
    _pathIdx: index('statistics_n_blocks_statistic_path_idx').on(columns._path),
    statistics_n_blocks_statistic_icon_idx: index('statistics_n_blocks_statistic_icon_idx').on(columns.icon),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [statistics_n.id],
      name: 'statistics_n_blocks_statistic_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const statistics_n = pgTable(
  'statistics_n',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    label: varchar('label').notNull().default('Секция статистика'),
    title: varchar('title'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    statistics_n_updated_at_idx: index('statistics_n_updated_at_idx').on(columns.updatedAt),
    statistics_n_created_at_idx: index('statistics_n_created_at_idx').on(columns.createdAt),
  }),
);

export const faq_left_right_blocks_q_a_block = pgTable(
  'faq_left_right_blocks_q_a_block',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    question: varchar('question').notNull(),
    answer: jsonb('answer').notNull(),
    blockName: varchar('block_name'),
  },
  columns => ({
    _orderIdx: index('faq_left_right_blocks_q_a_block_order_idx').on(columns._order),
    _parentIDIdx: index('faq_left_right_blocks_q_a_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('faq_left_right_blocks_q_a_block_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [faq_left_right.id],
      name: 'faq_left_right_blocks_q_a_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const faq_left_right = pgTable(
  'faq_left_right',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    label: varchar('label').notNull().default('FAQ-шахмат'),
    title: varchar('title').notNull().default('Често Задавани Въпроси'),
    helperText: jsonb('helper_text')
      .notNull()
      .default(sql`'{"root":{"children":[{"type":"paragraph","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Не откри твоя въпрос? ","type":"text","version":1},{"type":"link","url":"https://your-link-url.com","children":[{"detail":0,"format":0,"mode":"normal","style":"","text":"Свържи се с нас","type":"text","version":1}],"version":1},{"detail":0,"format":0,"mode":"normal","style":"","text":" и ще го добавим!","type":"text","version":1}],"direction":"ltr","format":"","indent":0,"version":1}],"direction":"ltr","format":"","indent":0,"type":"root","version":1}}'::jsonb`),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    faq_left_right_updated_at_idx: index('faq_left_right_updated_at_idx').on(columns.updatedAt),
    faq_left_right_created_at_idx: index('faq_left_right_created_at_idx').on(columns.createdAt),
  }),
);

export const redirects = pgTable(
  'redirects',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
);

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
  },
  columns => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  columns => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: uuid('users_id'),
    mediaID: uuid('media_id'),
    pagesID: uuid('pages_id'),
    postsID: uuid('posts_id'),
    categoriesID: uuid('categories_id'),
    attendeesID: uuid('attendees_id'),
    eventsID: uuid('events_id'),
    'marketing-sectionsID': uuid('marketing_sections_id'),
    partnersID: uuid('partners_id'),
    partners2ID: uuid('partners2_id'),
    ticketsID: uuid('tickets_id'),
    homepageID: uuid('homepage_id'),
    homepageGalleryID: uuid('homepage_gallery_id'),
    homepageTestimonial25ID: uuid('homepage_testimonial25_id'),
    statisticsNID: uuid('statistics_n_id'),
    faqLeftRightID: uuid('faq_left_right_id'),
    redirectsID: uuid('redirects_id'),
    'payload-jobsID': uuid('payload_jobs_id'),
  },
  columns => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index('payload_locked_documents_rels_users_id_idx').on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index('payload_locked_documents_rels_media_id_idx').on(columns.mediaID),
    payload_locked_documents_rels_pages_id_idx: index('payload_locked_documents_rels_pages_id_idx').on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index('payload_locked_documents_rels_posts_id_idx').on(columns.postsID),
    payload_locked_documents_rels_categories_id_idx: index('payload_locked_documents_rels_categories_id_idx').on(columns.categoriesID),
    payload_locked_documents_rels_attendees_id_idx: index('payload_locked_documents_rels_attendees_id_idx').on(columns.attendeesID),
    payload_locked_documents_rels_events_id_idx: index('payload_locked_documents_rels_events_id_idx').on(columns.eventsID),
    payload_locked_documents_rels_marketing_sections_id_idx: index('payload_locked_documents_rels_marketing_sections_id_idx').on(columns['marketing-sectionsID']),
    payload_locked_documents_rels_partners_id_idx: index('payload_locked_documents_rels_partners_id_idx').on(columns.partnersID),
    payload_locked_documents_rels_partners2_id_idx: index('payload_locked_documents_rels_partners2_id_idx').on(columns.partners2ID),
    payload_locked_documents_rels_tickets_id_idx: index('payload_locked_documents_rels_tickets_id_idx').on(columns.ticketsID),
    payload_locked_documents_rels_homepage_id_idx: index('payload_locked_documents_rels_homepage_id_idx').on(columns.homepageID),
    payload_locked_documents_rels_homepage_gallery_id_idx: index('payload_locked_documents_rels_homepage_gallery_id_idx').on(columns.homepageGalleryID),
    payload_locked_documents_rels_homepage_testimonial25_id_idx: index('payload_locked_documents_rels_homepage_testimonial25_id_idx').on(columns.homepageTestimonial25ID),
    payload_locked_documents_rels_statistics_n_id_idx: index('payload_locked_documents_rels_statistics_n_id_idx').on(columns.statisticsNID),
    payload_locked_documents_rels_faq_left_right_id_idx: index('payload_locked_documents_rels_faq_left_right_id_idx').on(columns.faqLeftRightID),
    payload_locked_documents_rels_redirects_id_idx: index('payload_locked_documents_rels_redirects_id_idx').on(columns.redirectsID),
    payload_locked_documents_rels_payload_jobs_id_idx: index('payload_locked_documents_rels_payload_jobs_id_idx').on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    attendeesIdFk: foreignKey({
      columns: [columns['attendeesID']],
      foreignColumns: [attendees.id],
      name: 'payload_locked_documents_rels_attendees_fk',
    }).onDelete('cascade'),
    eventsIdFk: foreignKey({
      columns: [columns['eventsID']],
      foreignColumns: [events.id],
      name: 'payload_locked_documents_rels_events_fk',
    }).onDelete('cascade'),
    'marketing-sectionsIdFk': foreignKey({
      columns: [columns['marketing-sectionsID']],
      foreignColumns: [marketing_sections.id],
      name: 'payload_locked_documents_rels_marketing_sections_fk',
    }).onDelete('cascade'),
    partnersIdFk: foreignKey({
      columns: [columns['partnersID']],
      foreignColumns: [partners.id],
      name: 'payload_locked_documents_rels_partners_fk',
    }).onDelete('cascade'),
    partners2IdFk: foreignKey({
      columns: [columns['partners2ID']],
      foreignColumns: [partners2.id],
      name: 'payload_locked_documents_rels_partners2_fk',
    }).onDelete('cascade'),
    ticketsIdFk: foreignKey({
      columns: [columns['ticketsID']],
      foreignColumns: [tickets.id],
      name: 'payload_locked_documents_rels_tickets_fk',
    }).onDelete('cascade'),
    homepageIdFk: foreignKey({
      columns: [columns['homepageID']],
      foreignColumns: [homepage.id],
      name: 'payload_locked_documents_rels_homepage_fk',
    }).onDelete('cascade'),
    homepageGalleryIdFk: foreignKey({
      columns: [columns['homepageGalleryID']],
      foreignColumns: [homepage_gallery.id],
      name: 'payload_locked_documents_rels_homepage_gallery_fk',
    }).onDelete('cascade'),
    homepageTestimonial25IdFk: foreignKey({
      columns: [columns['homepageTestimonial25ID']],
      foreignColumns: [homepage_testimonial25.id],
      name: 'payload_locked_documents_rels_homepage_testimonial25_fk',
    }).onDelete('cascade'),
    statisticsNIdFk: foreignKey({
      columns: [columns['statisticsNID']],
      foreignColumns: [statistics_n.id],
      name: 'payload_locked_documents_rels_statistics_n_fk',
    }).onDelete('cascade'),
    faqLeftRightIdFk: foreignKey({
      columns: [columns['faqLeftRightID']],
      foreignColumns: [faq_left_right.id],
      name: 'payload_locked_documents_rels_faq_left_right_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(columns.updatedAt),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: uuid('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: uuid('users_id'),
  },
  columns => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: uuid('id').defaultRandom().primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }).defaultNow().notNull(),
  },
  columns => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(columns.updatedAt),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(columns.createdAt),
  }),
);

export const contacts_phones = pgTable(
  'contacts_phones',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    phone: varchar('phone'),
  },
  columns => ({
    _orderIdx: index('contacts_phones_order_idx').on(columns._order),
    _parentIDIdx: index('contacts_phones_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [contacts.id],
      name: 'contacts_phones_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const contacts_emails = pgTable(
  'contacts_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    email: varchar('email'),
  },
  columns => ({
    _orderIdx: index('contacts_emails_order_idx').on(columns._order),
    _parentIDIdx: index('contacts_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [contacts.id],
      name: 'contacts_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const contacts_socials = pgTable(
  'contacts_socials',
  {
    _order: integer('_order').notNull(),
    _parentID: uuid('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    platform: enum_contacts_socials_platform('platform').notNull(),
    url: varchar('url').notNull(),
  },
  columns => ({
    _orderIdx: index('contacts_socials_order_idx').on(columns._order),
    _parentIDIdx: index('contacts_socials_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [contacts.id],
      name: 'contacts_socials_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const contacts = pgTable('contacts', {
  id: uuid('id').defaultRandom().primaryKey(),
  title: varchar('title'),
  subheading: varchar('subheading'),
  gmaps: varchar('gmaps').default('https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d100939.98555098464!2d-122.50764017948552!3d37.75781499651705!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x80859a6d00690021%3A0x4a501367f076adff!2sSan%20Francisco%2C%20CA!5e0!3m2!1sen!2sus!4v1619806204562!5m2!1sen!2sus'),
  cta: varchar('cta').notNull(),
  address: varchar('address'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
});

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}));
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_pages_blocks_q_a_block = relations(pages_blocks_q_a_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_q_a_block._parentID],
    references: [pages.id],
    relationName: '_blocks_qABlock',
  }),
}));
export const relations_pages_blocks_faq_chess_mate = relations(pages_blocks_faq_chess_mate, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_faq_chess_mate._parentID],
    references: [pages.id],
    relationName: '_blocks_faqChessMate',
  }),
}));
export const relations_pages_blocks_gallery7 = relations(pages_blocks_gallery7, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_gallery7._parentID],
    references: [pages.id],
    relationName: '_blocks_gallery7',
  }),
}));
export const relations_pages_blocks_testimonial25_card_block = relations(pages_blocks_testimonial25_card_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_testimonial25_card_block._parentID],
    references: [pages.id],
    relationName: '_blocks_testimonial25CardBlock',
  }),
  image: one(media, {
    fields: [pages_blocks_testimonial25_card_block.image],
    references: [media.id],
    relationName: 'image',
  }),
}));
export const relations_pages_blocks_testimonial25_block = relations(pages_blocks_testimonial25_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_testimonial25_block._parentID],
    references: [pages.id],
    relationName: '_blocks_testimonial25Block',
  }),
}));
export const relations_pages_blocks_statistic = relations(pages_blocks_statistic, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_statistic._parentID],
    references: [pages.id],
    relationName: '_blocks_statistic',
  }),
  icon: one(media, {
    fields: [pages_blocks_statistic.icon],
    references: [media.id],
    relationName: 'icon',
  }),
}));
export const relations_pages_blocks_statistics = relations(pages_blocks_statistics, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_statistics._parentID],
    references: [pages.id],
    relationName: '_blocks_statistics',
  }),
}));
export const relations_pages_blocks_agenda_items = relations(pages_blocks_agenda_items, ({ one }) => ({
  _parentID: one(pages_blocks_agenda, {
    fields: [pages_blocks_agenda_items._parentID],
    references: [pages_blocks_agenda.id],
    relationName: 'items',
  }),
}));
export const relations_pages_blocks_agenda = relations(pages_blocks_agenda, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_agenda._parentID],
    references: [pages.id],
    relationName: '_blocks_agenda',
  }),
  items: many(pages_blocks_agenda_items, {
    relationName: 'items',
  }),
}));
export const relations_pages_blocks_lecturers_lecturers = relations(pages_blocks_lecturers_lecturers, ({ one }) => ({
  _parentID: one(pages_blocks_lecturers, {
    fields: [pages_blocks_lecturers_lecturers._parentID],
    references: [pages_blocks_lecturers.id],
    relationName: 'lecturers',
  }),
  image: one(media, {
    fields: [pages_blocks_lecturers_lecturers.image],
    references: [media.id],
    relationName: 'image',
  }),
}));
export const relations_pages_blocks_lecturers = relations(pages_blocks_lecturers, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_lecturers._parentID],
    references: [pages.id],
    relationName: '_blocks_lecturers',
  }),
  lecturers: many(pages_blocks_lecturers_lecturers, {
    relationName: 'lecturers',
  }),
}));
export const relations_pages_blocks_timeline_steps = relations(pages_blocks_timeline_steps, ({ one }) => ({
  _parentID: one(pages_blocks_timeline, {
    fields: [pages_blocks_timeline_steps._parentID],
    references: [pages_blocks_timeline.id],
    relationName: 'steps',
  }),
}));
export const relations_pages_blocks_timeline = relations(pages_blocks_timeline, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_timeline._parentID],
    references: [pages.id],
    relationName: '_blocks_timeline',
  }),
  steps: many(pages_blocks_timeline_steps, {
    relationName: 'steps',
  }),
}));
export const relations_pages_blocks_who_is_the_conf_for_items = relations(pages_blocks_who_is_the_conf_for_items, ({ one }) => ({
  _parentID: one(pages_blocks_who_is_the_conf_for, {
    fields: [pages_blocks_who_is_the_conf_for_items._parentID],
    references: [pages_blocks_who_is_the_conf_for.id],
    relationName: 'items',
  }),
  icon: one(media, {
    fields: [pages_blocks_who_is_the_conf_for_items.icon],
    references: [media.id],
    relationName: 'icon',
  }),
}));
export const relations_pages_blocks_who_is_the_conf_for = relations(pages_blocks_who_is_the_conf_for, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_who_is_the_conf_for._parentID],
    references: [pages.id],
    relationName: '_blocks_whoIsTheConfFor',
  }),
  items: many(pages_blocks_who_is_the_conf_for_items, {
    relationName: 'items',
  }),
}));
export const relations_pages_blocks_pricing_with_countdown_plans_features = relations(pages_blocks_pricing_with_countdown_plans_features, ({ one }) => ({
  _parentID: one(pages_blocks_pricing_with_countdown_plans, {
    fields: [pages_blocks_pricing_with_countdown_plans_features._parentID],
    references: [pages_blocks_pricing_with_countdown_plans.id],
    relationName: 'features',
  }),
}));
export const relations_pages_blocks_pricing_with_countdown_plans = relations(pages_blocks_pricing_with_countdown_plans, ({ one, many }) => ({
  _parentID: one(pages_blocks_pricing_with_countdown, {
    fields: [pages_blocks_pricing_with_countdown_plans._parentID],
    references: [pages_blocks_pricing_with_countdown.id],
    relationName: 'plans',
  }),
  features: many(pages_blocks_pricing_with_countdown_plans_features, {
    relationName: 'features',
  }),
}));
export const relations_pages_blocks_pricing_with_countdown = relations(pages_blocks_pricing_with_countdown, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_pricing_with_countdown._parentID],
    references: [pages.id],
    relationName: '_blocks_PricingWithCountdown',
  }),
  plans: many(pages_blocks_pricing_with_countdown_plans, {
    relationName: 'plans',
  }),
}));
export const relations_pages_blocks_testimonials2_testimonials = relations(pages_blocks_testimonials2_testimonials, ({ one }) => ({
  _parentID: one(pages_blocks_testimonials2, {
    fields: [pages_blocks_testimonials2_testimonials._parentID],
    references: [pages_blocks_testimonials2.id],
    relationName: 'testimonials',
  }),
  clientImg: one(media, {
    fields: [pages_blocks_testimonials2_testimonials.clientImg],
    references: [media.id],
    relationName: 'clientImg',
  }),
  cardImg: one(media, {
    fields: [pages_blocks_testimonials2_testimonials.cardImg],
    references: [media.id],
    relationName: 'cardImg',
  }),
}));
export const relations_pages_blocks_testimonials2 = relations(pages_blocks_testimonials2, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_testimonials2._parentID],
    references: [pages.id],
    relationName: '_blocks_testimonials2',
  }),
  testimonials: many(pages_blocks_testimonials2_testimonials, {
    relationName: 'testimonials',
  }),
}));
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [pages_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  heroImg: one(media, {
    fields: [pages.heroImg],
    references: [media.id],
    relationName: 'heroImg',
  }),
  _blocks_qABlock: many(pages_blocks_q_a_block, {
    relationName: '_blocks_qABlock',
  }),
  _blocks_faqChessMate: many(pages_blocks_faq_chess_mate, {
    relationName: '_blocks_faqChessMate',
  }),
  _blocks_gallery7: many(pages_blocks_gallery7, {
    relationName: '_blocks_gallery7',
  }),
  _blocks_testimonial25CardBlock: many(pages_blocks_testimonial25_card_block, {
    relationName: '_blocks_testimonial25CardBlock',
  }),
  _blocks_testimonial25Block: many(pages_blocks_testimonial25_block, {
    relationName: '_blocks_testimonial25Block',
  }),
  _blocks_statistic: many(pages_blocks_statistic, {
    relationName: '_blocks_statistic',
  }),
  _blocks_statistics: many(pages_blocks_statistics, {
    relationName: '_blocks_statistics',
  }),
  _blocks_agenda: many(pages_blocks_agenda, {
    relationName: '_blocks_agenda',
  }),
  _blocks_lecturers: many(pages_blocks_lecturers, {
    relationName: '_blocks_lecturers',
  }),
  _blocks_timeline: many(pages_blocks_timeline, {
    relationName: '_blocks_timeline',
  }),
  _blocks_whoIsTheConfFor: many(pages_blocks_who_is_the_conf_for, {
    relationName: '_blocks_whoIsTheConfFor',
  }),
  _blocks_PricingWithCountdown: many(pages_blocks_pricing_with_countdown, {
    relationName: '_blocks_PricingWithCountdown',
  }),
  _blocks_testimonials2: many(pages_blocks_testimonials2, {
    relationName: '_blocks_testimonials2',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}));
export const relations__pages_v_blocks_q_a_block = relations(_pages_v_blocks_q_a_block, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_q_a_block._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_qABlock',
  }),
}));
export const relations__pages_v_blocks_faq_chess_mate = relations(_pages_v_blocks_faq_chess_mate, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_faq_chess_mate._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_faqChessMate',
  }),
}));
export const relations__pages_v_blocks_gallery7 = relations(_pages_v_blocks_gallery7, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_gallery7._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_gallery7',
  }),
}));
export const relations__pages_v_blocks_testimonial25_card_block = relations(_pages_v_blocks_testimonial25_card_block, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_testimonial25_card_block._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_testimonial25CardBlock',
  }),
  image: one(media, {
    fields: [_pages_v_blocks_testimonial25_card_block.image],
    references: [media.id],
    relationName: 'image',
  }),
}));
export const relations__pages_v_blocks_testimonial25_block = relations(_pages_v_blocks_testimonial25_block, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_testimonial25_block._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_testimonial25Block',
  }),
}));
export const relations__pages_v_blocks_statistic = relations(_pages_v_blocks_statistic, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_statistic._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_statistic',
  }),
  icon: one(media, {
    fields: [_pages_v_blocks_statistic.icon],
    references: [media.id],
    relationName: 'icon',
  }),
}));
export const relations__pages_v_blocks_statistics = relations(_pages_v_blocks_statistics, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_statistics._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_statistics',
  }),
}));
export const relations__pages_v_blocks_agenda_items = relations(_pages_v_blocks_agenda_items, ({ one }) => ({
  _parentID: one(_pages_v_blocks_agenda, {
    fields: [_pages_v_blocks_agenda_items._parentID],
    references: [_pages_v_blocks_agenda.id],
    relationName: 'items',
  }),
}));
export const relations__pages_v_blocks_agenda = relations(_pages_v_blocks_agenda, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_agenda._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_agenda',
  }),
  items: many(_pages_v_blocks_agenda_items, {
    relationName: 'items',
  }),
}));
export const relations__pages_v_blocks_lecturers_lecturers = relations(_pages_v_blocks_lecturers_lecturers, ({ one }) => ({
  _parentID: one(_pages_v_blocks_lecturers, {
    fields: [_pages_v_blocks_lecturers_lecturers._parentID],
    references: [_pages_v_blocks_lecturers.id],
    relationName: 'lecturers',
  }),
  image: one(media, {
    fields: [_pages_v_blocks_lecturers_lecturers.image],
    references: [media.id],
    relationName: 'image',
  }),
}));
export const relations__pages_v_blocks_lecturers = relations(_pages_v_blocks_lecturers, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_lecturers._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_lecturers',
  }),
  lecturers: many(_pages_v_blocks_lecturers_lecturers, {
    relationName: 'lecturers',
  }),
}));
export const relations__pages_v_blocks_timeline_steps = relations(_pages_v_blocks_timeline_steps, ({ one }) => ({
  _parentID: one(_pages_v_blocks_timeline, {
    fields: [_pages_v_blocks_timeline_steps._parentID],
    references: [_pages_v_blocks_timeline.id],
    relationName: 'steps',
  }),
}));
export const relations__pages_v_blocks_timeline = relations(_pages_v_blocks_timeline, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_timeline._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_timeline',
  }),
  steps: many(_pages_v_blocks_timeline_steps, {
    relationName: 'steps',
  }),
}));
export const relations__pages_v_blocks_who_is_the_conf_for_items = relations(_pages_v_blocks_who_is_the_conf_for_items, ({ one }) => ({
  _parentID: one(_pages_v_blocks_who_is_the_conf_for, {
    fields: [_pages_v_blocks_who_is_the_conf_for_items._parentID],
    references: [_pages_v_blocks_who_is_the_conf_for.id],
    relationName: 'items',
  }),
  icon: one(media, {
    fields: [_pages_v_blocks_who_is_the_conf_for_items.icon],
    references: [media.id],
    relationName: 'icon',
  }),
}));
export const relations__pages_v_blocks_who_is_the_conf_for = relations(_pages_v_blocks_who_is_the_conf_for, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_who_is_the_conf_for._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_whoIsTheConfFor',
  }),
  items: many(_pages_v_blocks_who_is_the_conf_for_items, {
    relationName: 'items',
  }),
}));
export const relations__pages_v_blocks_pricing_with_countdown_plans_features = relations(_pages_v_blocks_pricing_with_countdown_plans_features, ({ one }) => ({
  _parentID: one(_pages_v_blocks_pricing_with_countdown_plans, {
    fields: [_pages_v_blocks_pricing_with_countdown_plans_features._parentID],
    references: [_pages_v_blocks_pricing_with_countdown_plans.id],
    relationName: 'features',
  }),
}));
export const relations__pages_v_blocks_pricing_with_countdown_plans = relations(_pages_v_blocks_pricing_with_countdown_plans, ({ one, many }) => ({
  _parentID: one(_pages_v_blocks_pricing_with_countdown, {
    fields: [_pages_v_blocks_pricing_with_countdown_plans._parentID],
    references: [_pages_v_blocks_pricing_with_countdown.id],
    relationName: 'plans',
  }),
  features: many(_pages_v_blocks_pricing_with_countdown_plans_features, {
    relationName: 'features',
  }),
}));
export const relations__pages_v_blocks_pricing_with_countdown = relations(_pages_v_blocks_pricing_with_countdown, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_pricing_with_countdown._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_PricingWithCountdown',
  }),
  plans: many(_pages_v_blocks_pricing_with_countdown_plans, {
    relationName: 'plans',
  }),
}));
export const relations__pages_v_blocks_testimonials2_testimonials = relations(_pages_v_blocks_testimonials2_testimonials, ({ one }) => ({
  _parentID: one(_pages_v_blocks_testimonials2, {
    fields: [_pages_v_blocks_testimonials2_testimonials._parentID],
    references: [_pages_v_blocks_testimonials2.id],
    relationName: 'testimonials',
  }),
  clientImg: one(media, {
    fields: [_pages_v_blocks_testimonials2_testimonials.clientImg],
    references: [media.id],
    relationName: 'clientImg',
  }),
  cardImg: one(media, {
    fields: [_pages_v_blocks_testimonials2_testimonials.cardImg],
    references: [media.id],
    relationName: 'cardImg',
  }),
}));
export const relations__pages_v_blocks_testimonials2 = relations(_pages_v_blocks_testimonials2, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_testimonials2._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_testimonials2',
  }),
  testimonials: many(_pages_v_blocks_testimonials2_testimonials, {
    relationName: 'testimonials',
  }),
}));
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [_pages_v_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_heroImg: one(media, {
    fields: [_pages_v.version_heroImg],
    references: [media.id],
    relationName: 'version_heroImg',
  }),
  _blocks_qABlock: many(_pages_v_blocks_q_a_block, {
    relationName: '_blocks_qABlock',
  }),
  _blocks_faqChessMate: many(_pages_v_blocks_faq_chess_mate, {
    relationName: '_blocks_faqChessMate',
  }),
  _blocks_gallery7: many(_pages_v_blocks_gallery7, {
    relationName: '_blocks_gallery7',
  }),
  _blocks_testimonial25CardBlock: many(_pages_v_blocks_testimonial25_card_block, {
    relationName: '_blocks_testimonial25CardBlock',
  }),
  _blocks_testimonial25Block: many(_pages_v_blocks_testimonial25_block, {
    relationName: '_blocks_testimonial25Block',
  }),
  _blocks_statistic: many(_pages_v_blocks_statistic, {
    relationName: '_blocks_statistic',
  }),
  _blocks_statistics: many(_pages_v_blocks_statistics, {
    relationName: '_blocks_statistics',
  }),
  _blocks_agenda: many(_pages_v_blocks_agenda, {
    relationName: '_blocks_agenda',
  }),
  _blocks_lecturers: many(_pages_v_blocks_lecturers, {
    relationName: '_blocks_lecturers',
  }),
  _blocks_timeline: many(_pages_v_blocks_timeline, {
    relationName: '_blocks_timeline',
  }),
  _blocks_whoIsTheConfFor: many(_pages_v_blocks_who_is_the_conf_for, {
    relationName: '_blocks_whoIsTheConfFor',
  }),
  _blocks_PricingWithCountdown: many(_pages_v_blocks_pricing_with_countdown, {
    relationName: '_blocks_PricingWithCountdown',
  }),
  _blocks_testimonials2: many(_pages_v_blocks_testimonials2, {
    relationName: '_blocks_testimonials2',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}));
export const relations_posts_blocks_high_impact_hero_links = relations(posts_blocks_high_impact_hero_links, ({ one }) => ({
  _parentID: one(posts_blocks_high_impact_hero, {
    fields: [posts_blocks_high_impact_hero_links._parentID],
    references: [posts_blocks_high_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations_posts_blocks_high_impact_hero = relations(posts_blocks_high_impact_hero, ({ one, many }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_high_impact_hero._parentID],
    references: [posts.id],
    relationName: '_blocks_HighImpactHero',
  }),
  links: many(posts_blocks_high_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [posts_blocks_high_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_posts_blocks_medium_impact_hero_links = relations(posts_blocks_medium_impact_hero_links, ({ one }) => ({
  _parentID: one(posts_blocks_medium_impact_hero, {
    fields: [posts_blocks_medium_impact_hero_links._parentID],
    references: [posts_blocks_medium_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations_posts_blocks_medium_impact_hero = relations(posts_blocks_medium_impact_hero, ({ one, many }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_medium_impact_hero._parentID],
    references: [posts.id],
    relationName: '_blocks_MediumImpactHero',
  }),
  links: many(posts_blocks_medium_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [posts_blocks_medium_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_posts_blocks_low_impact_hero_links = relations(posts_blocks_low_impact_hero_links, ({ one }) => ({
  _parentID: one(posts_blocks_low_impact_hero, {
    fields: [posts_blocks_low_impact_hero_links._parentID],
    references: [posts_blocks_low_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations_posts_blocks_low_impact_hero = relations(posts_blocks_low_impact_hero, ({ one, many }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_low_impact_hero._parentID],
    references: [posts.id],
    relationName: '_blocks_LowImpactHero',
  }),
  links: many(posts_blocks_low_impact_hero_links, {
    relationName: 'links',
  }),
}));
export const relations_posts_blocks_cta_links = relations(posts_blocks_cta_links, ({ one }) => ({
  _parentID: one(posts_blocks_cta, {
    fields: [posts_blocks_cta_links._parentID],
    references: [posts_blocks_cta.id],
    relationName: 'links',
  }),
}));
export const relations_posts_blocks_cta = relations(posts_blocks_cta, ({ one, many }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_cta._parentID],
    references: [posts.id],
    relationName: '_blocks_cta',
  }),
  links: many(posts_blocks_cta_links, {
    relationName: 'links',
  }),
}));
export const relations_posts_blocks_content_columns = relations(posts_blocks_content_columns, ({ one }) => ({
  _parentID: one(posts_blocks_content, {
    fields: [posts_blocks_content_columns._parentID],
    references: [posts_blocks_content.id],
    relationName: 'columns',
  }),
}));
export const relations_posts_blocks_content = relations(posts_blocks_content, ({ one, many }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_content._parentID],
    references: [posts.id],
    relationName: '_blocks_content',
  }),
  columns: many(posts_blocks_content_columns, {
    relationName: 'columns',
  }),
}));
export const relations_posts_blocks_media_block = relations(posts_blocks_media_block, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_media_block._parentID],
    references: [posts.id],
    relationName: '_blocks_mediaBlock',
  }),
  media: one(media, {
    fields: [posts_blocks_media_block.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_posts_blocks_archive = relations(posts_blocks_archive, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_archive._parentID],
    references: [posts.id],
    relationName: '_blocks_archive',
  }),
}));
export const relations_posts_blocks_q_a_block = relations(posts_blocks_q_a_block, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_q_a_block._parentID],
    references: [posts.id],
    relationName: '_blocks_qABlock',
  }),
}));
export const relations_posts_blocks_faq_chess_mate = relations(posts_blocks_faq_chess_mate, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_blocks_faq_chess_mate._parentID],
    references: [posts.id],
    relationName: '_blocks_faqChessMate',
  }),
}));
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  pagesID: one(pages, {
    fields: [posts_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _blocks_HighImpactHero: many(posts_blocks_high_impact_hero, {
    relationName: '_blocks_HighImpactHero',
  }),
  _blocks_MediumImpactHero: many(posts_blocks_medium_impact_hero, {
    relationName: '_blocks_MediumImpactHero',
  }),
  _blocks_LowImpactHero: many(posts_blocks_low_impact_hero, {
    relationName: '_blocks_LowImpactHero',
  }),
  _blocks_cta: many(posts_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(posts_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(posts_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(posts_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_qABlock: many(posts_blocks_q_a_block, {
    relationName: '_blocks_qABlock',
  }),
  _blocks_faqChessMate: many(posts_blocks_faq_chess_mate, {
    relationName: '_blocks_faqChessMate',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}));
export const relations__posts_v_version_populated_authors = relations(_posts_v_version_populated_authors, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_version_populated_authors._parentID],
    references: [_posts_v.id],
    relationName: 'version_populatedAuthors',
  }),
}));
export const relations__posts_v_blocks_high_impact_hero_links = relations(_posts_v_blocks_high_impact_hero_links, ({ one }) => ({
  _parentID: one(_posts_v_blocks_high_impact_hero, {
    fields: [_posts_v_blocks_high_impact_hero_links._parentID],
    references: [_posts_v_blocks_high_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations__posts_v_blocks_high_impact_hero = relations(_posts_v_blocks_high_impact_hero, ({ one, many }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_high_impact_hero._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_HighImpactHero',
  }),
  links: many(_posts_v_blocks_high_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [_posts_v_blocks_high_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations__posts_v_blocks_medium_impact_hero_links = relations(_posts_v_blocks_medium_impact_hero_links, ({ one }) => ({
  _parentID: one(_posts_v_blocks_medium_impact_hero, {
    fields: [_posts_v_blocks_medium_impact_hero_links._parentID],
    references: [_posts_v_blocks_medium_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations__posts_v_blocks_medium_impact_hero = relations(_posts_v_blocks_medium_impact_hero, ({ one, many }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_medium_impact_hero._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_MediumImpactHero',
  }),
  links: many(_posts_v_blocks_medium_impact_hero_links, {
    relationName: 'links',
  }),
  media: one(media, {
    fields: [_posts_v_blocks_medium_impact_hero.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations__posts_v_blocks_low_impact_hero_links = relations(_posts_v_blocks_low_impact_hero_links, ({ one }) => ({
  _parentID: one(_posts_v_blocks_low_impact_hero, {
    fields: [_posts_v_blocks_low_impact_hero_links._parentID],
    references: [_posts_v_blocks_low_impact_hero.id],
    relationName: 'links',
  }),
}));
export const relations__posts_v_blocks_low_impact_hero = relations(_posts_v_blocks_low_impact_hero, ({ one, many }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_low_impact_hero._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_LowImpactHero',
  }),
  links: many(_posts_v_blocks_low_impact_hero_links, {
    relationName: 'links',
  }),
}));
export const relations__posts_v_blocks_cta_links = relations(_posts_v_blocks_cta_links, ({ one }) => ({
  _parentID: one(_posts_v_blocks_cta, {
    fields: [_posts_v_blocks_cta_links._parentID],
    references: [_posts_v_blocks_cta.id],
    relationName: 'links',
  }),
}));
export const relations__posts_v_blocks_cta = relations(_posts_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_cta._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_posts_v_blocks_cta_links, {
    relationName: 'links',
  }),
}));
export const relations__posts_v_blocks_content_columns = relations(_posts_v_blocks_content_columns, ({ one }) => ({
  _parentID: one(_posts_v_blocks_content, {
    fields: [_posts_v_blocks_content_columns._parentID],
    references: [_posts_v_blocks_content.id],
    relationName: 'columns',
  }),
}));
export const relations__posts_v_blocks_content = relations(_posts_v_blocks_content, ({ one, many }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_content._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_content',
  }),
  columns: many(_posts_v_blocks_content_columns, {
    relationName: 'columns',
  }),
}));
export const relations__posts_v_blocks_media_block = relations(_posts_v_blocks_media_block, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_media_block._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_mediaBlock',
  }),
  media: one(media, {
    fields: [_posts_v_blocks_media_block.media],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations__posts_v_blocks_archive = relations(_posts_v_blocks_archive, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_archive._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_archive',
  }),
}));
export const relations__posts_v_blocks_q_a_block = relations(_posts_v_blocks_q_a_block, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_q_a_block._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_qABlock',
  }),
}));
export const relations__posts_v_blocks_faq_chess_mate = relations(_posts_v_blocks_faq_chess_mate, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_blocks_faq_chess_mate._parentID],
    references: [_posts_v.id],
    relationName: '_blocks_faqChessMate',
  }),
}));
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  pagesID: one(pages, {
    fields: [_posts_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}));
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _blocks_HighImpactHero: many(_posts_v_blocks_high_impact_hero, {
    relationName: '_blocks_HighImpactHero',
  }),
  _blocks_MediumImpactHero: many(_posts_v_blocks_medium_impact_hero, {
    relationName: '_blocks_MediumImpactHero',
  }),
  _blocks_LowImpactHero: many(_posts_v_blocks_low_impact_hero, {
    relationName: '_blocks_LowImpactHero',
  }),
  _blocks_cta: many(_posts_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_posts_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_posts_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_posts_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_qABlock: many(_posts_v_blocks_q_a_block, {
    relationName: '_blocks_qABlock',
  }),
  _blocks_faqChessMate: many(_posts_v_blocks_faq_chess_mate, {
    relationName: '_blocks_faqChessMate',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_categories = relations(categories, () => ({}));
export const relations_attendees = relations(attendees, () => ({}));
export const relations_events = relations(events, ({ one }) => ({
  thumbnail: one(media, {
    fields: [events.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
  locationImg: one(media, {
    fields: [events.locationImg],
    references: [media.id],
    relationName: 'locationImg',
  }),
}));
export const relations_marketing_sections_blocks_partners = relations(marketing_sections_blocks_partners, ({ one }) => ({
  _parentID: one(marketing_sections, {
    fields: [marketing_sections_blocks_partners._parentID],
    references: [marketing_sections.id],
    relationName: '_blocks_partners',
  }),
}));
export const relations_marketing_sections_blocks_partners2 = relations(marketing_sections_blocks_partners2, ({ one }) => ({
  _parentID: one(marketing_sections, {
    fields: [marketing_sections_blocks_partners2._parentID],
    references: [marketing_sections.id],
    relationName: '_blocks_partners2',
  }),
}));
export const relations_marketing_sections_rels = relations(marketing_sections_rels, ({ one }) => ({
  parent: one(marketing_sections, {
    fields: [marketing_sections_rels.parent],
    references: [marketing_sections.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [marketing_sections_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_marketing_sections = relations(marketing_sections, ({ many }) => ({
  _blocks_partners: many(marketing_sections_blocks_partners, {
    relationName: '_blocks_partners',
  }),
  _blocks_partners2: many(marketing_sections_blocks_partners2, {
    relationName: '_blocks_partners2',
  }),
  _rels: many(marketing_sections_rels, {
    relationName: '_rels',
  }),
}));
export const relations_partners_blocks_partners = relations(partners_blocks_partners, ({ one }) => ({
  _parentID: one(partners, {
    fields: [partners_blocks_partners._parentID],
    references: [partners.id],
    relationName: '_blocks_partners',
  }),
}));
export const relations_partners_rels = relations(partners_rels, ({ one }) => ({
  parent: one(partners, {
    fields: [partners_rels.parent],
    references: [partners.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [partners_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_partners = relations(partners, ({ many }) => ({
  _blocks_partners: many(partners_blocks_partners, {
    relationName: '_blocks_partners',
  }),
  _rels: many(partners_rels, {
    relationName: '_rels',
  }),
}));
export const relations_partners2_rels = relations(partners2_rels, ({ one }) => ({
  parent: one(partners2, {
    fields: [partners2_rels.parent],
    references: [partners2.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [partners2_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_partners2 = relations(partners2, ({ many }) => ({
  _rels: many(partners2_rels, {
    relationName: '_rels',
  }),
}));
export const relations_tickets = relations(tickets, ({ one }) => ({
  attendee: one(attendees, {
    fields: [tickets.attendee],
    references: [attendees.id],
    relationName: 'attendee',
  }),
  event: one(events, {
    fields: [tickets.event],
    references: [events.id],
    relationName: 'event',
  }),
}));
export const relations_homepage_rels = relations(homepage_rels, ({ one }) => ({
  parent: one(homepage, {
    fields: [homepage_rels.parent],
    references: [homepage.id],
    relationName: '_rels',
  }),
  faqLeftRightID: one(faq_left_right, {
    fields: [homepage_rels.faqLeftRightID],
    references: [faq_left_right.id],
    relationName: 'faqLeftRight',
  }),
  homepageGalleryID: one(homepage_gallery, {
    fields: [homepage_rels.homepageGalleryID],
    references: [homepage_gallery.id],
    relationName: 'gallery7',
  }),
  homepageTestimonial25ID: one(homepage_testimonial25, {
    fields: [homepage_rels.homepageTestimonial25ID],
    references: [homepage_testimonial25.id],
    relationName: 'homepageTestimonial25',
  }),
  statisticsNID: one(statistics_n, {
    fields: [homepage_rels.statisticsNID],
    references: [statistics_n.id],
    relationName: 'statisticsN',
  }),
}));
export const relations_homepage = relations(homepage, ({ one, many }) => ({
  heroImg: one(media, {
    fields: [homepage.heroImg],
    references: [media.id],
    relationName: 'heroImg',
  }),
  meta_image: one(media, {
    fields: [homepage.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(homepage_rels, {
    relationName: '_rels',
  }),
}));
export const relations__homepage_v_rels = relations(_homepage_v_rels, ({ one }) => ({
  parent: one(_homepage_v, {
    fields: [_homepage_v_rels.parent],
    references: [_homepage_v.id],
    relationName: '_rels',
  }),
  faqLeftRightID: one(faq_left_right, {
    fields: [_homepage_v_rels.faqLeftRightID],
    references: [faq_left_right.id],
    relationName: 'faqLeftRight',
  }),
  homepageGalleryID: one(homepage_gallery, {
    fields: [_homepage_v_rels.homepageGalleryID],
    references: [homepage_gallery.id],
    relationName: 'gallery7',
  }),
  homepageTestimonial25ID: one(homepage_testimonial25, {
    fields: [_homepage_v_rels.homepageTestimonial25ID],
    references: [homepage_testimonial25.id],
    relationName: 'homepageTestimonial25',
  }),
  statisticsNID: one(statistics_n, {
    fields: [_homepage_v_rels.statisticsNID],
    references: [statistics_n.id],
    relationName: 'statisticsN',
  }),
}));
export const relations__homepage_v = relations(_homepage_v, ({ one, many }) => ({
  parent: one(homepage, {
    fields: [_homepage_v.parent],
    references: [homepage.id],
    relationName: 'parent',
  }),
  version_heroImg: one(media, {
    fields: [_homepage_v.version_heroImg],
    references: [media.id],
    relationName: 'version_heroImg',
  }),
  version_meta_image: one(media, {
    fields: [_homepage_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_homepage_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_homepage_gallery_rels = relations(homepage_gallery_rels, ({ one }) => ({
  parent: one(homepage_gallery, {
    fields: [homepage_gallery_rels.parent],
    references: [homepage_gallery.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [homepage_gallery_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}));
export const relations_homepage_gallery = relations(homepage_gallery, ({ many }) => ({
  _rels: many(homepage_gallery_rels, {
    relationName: '_rels',
  }),
}));
export const relations_homepage_testimonial25_blocks_testimonial25_card_block = relations(homepage_testimonial25_blocks_testimonial25_card_block, ({ one }) => ({
  _parentID: one(homepage_testimonial25, {
    fields: [homepage_testimonial25_blocks_testimonial25_card_block._parentID],
    references: [homepage_testimonial25.id],
    relationName: '_blocks_testimonial25CardBlock',
  }),
  image: one(media, {
    fields: [homepage_testimonial25_blocks_testimonial25_card_block.image],
    references: [media.id],
    relationName: 'image',
  }),
}));
export const relations_homepage_testimonial25 = relations(homepage_testimonial25, ({ many }) => ({
  _blocks_testimonial25CardBlock: many(homepage_testimonial25_blocks_testimonial25_card_block, {
    relationName: '_blocks_testimonial25CardBlock',
  }),
}));
export const relations_statistics_n_blocks_statistic = relations(statistics_n_blocks_statistic, ({ one }) => ({
  _parentID: one(statistics_n, {
    fields: [statistics_n_blocks_statistic._parentID],
    references: [statistics_n.id],
    relationName: '_blocks_statistic',
  }),
  icon: one(media, {
    fields: [statistics_n_blocks_statistic.icon],
    references: [media.id],
    relationName: 'icon',
  }),
}));
export const relations_statistics_n = relations(statistics_n, ({ many }) => ({
  _blocks_statistic: many(statistics_n_blocks_statistic, {
    relationName: '_blocks_statistic',
  }),
}));
export const relations_faq_left_right_blocks_q_a_block = relations(faq_left_right_blocks_q_a_block, ({ one }) => ({
  _parentID: one(faq_left_right, {
    fields: [faq_left_right_blocks_q_a_block._parentID],
    references: [faq_left_right.id],
    relationName: '_blocks_qABlock',
  }),
}));
export const relations_faq_left_right = relations(faq_left_right, ({ many }) => ({
  _blocks_qABlock: many(faq_left_right_blocks_q_a_block, {
    relationName: '_blocks_qABlock',
  }),
}));
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}));
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}));
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}));
export const relations_payload_locked_documents_rels = relations(payload_locked_documents_rels, ({ one }) => ({
  parent: one(payload_locked_documents, {
    fields: [payload_locked_documents_rels.parent],
    references: [payload_locked_documents.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [payload_locked_documents_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
  mediaID: one(media, {
    fields: [payload_locked_documents_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
  pagesID: one(pages, {
    fields: [payload_locked_documents_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [payload_locked_documents_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [payload_locked_documents_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  attendeesID: one(attendees, {
    fields: [payload_locked_documents_rels.attendeesID],
    references: [attendees.id],
    relationName: 'attendees',
  }),
  eventsID: one(events, {
    fields: [payload_locked_documents_rels.eventsID],
    references: [events.id],
    relationName: 'events',
  }),
  'marketing-sectionsID': one(marketing_sections, {
    fields: [payload_locked_documents_rels['marketing-sectionsID']],
    references: [marketing_sections.id],
    relationName: 'marketing-sections',
  }),
  partnersID: one(partners, {
    fields: [payload_locked_documents_rels.partnersID],
    references: [partners.id],
    relationName: 'partners',
  }),
  partners2ID: one(partners2, {
    fields: [payload_locked_documents_rels.partners2ID],
    references: [partners2.id],
    relationName: 'partners2',
  }),
  ticketsID: one(tickets, {
    fields: [payload_locked_documents_rels.ticketsID],
    references: [tickets.id],
    relationName: 'tickets',
  }),
  homepageID: one(homepage, {
    fields: [payload_locked_documents_rels.homepageID],
    references: [homepage.id],
    relationName: 'homepage',
  }),
  homepageGalleryID: one(homepage_gallery, {
    fields: [payload_locked_documents_rels.homepageGalleryID],
    references: [homepage_gallery.id],
    relationName: 'gallery7',
  }),
  homepageTestimonial25ID: one(homepage_testimonial25, {
    fields: [payload_locked_documents_rels.homepageTestimonial25ID],
    references: [homepage_testimonial25.id],
    relationName: 'homepageTestimonial25',
  }),
  statisticsNID: one(statistics_n, {
    fields: [payload_locked_documents_rels.statisticsNID],
    references: [statistics_n.id],
    relationName: 'statisticsN',
  }),
  faqLeftRightID: one(faq_left_right, {
    fields: [payload_locked_documents_rels.faqLeftRightID],
    references: [faq_left_right.id],
    relationName: 'faqLeftRight',
  }),
  redirectsID: one(redirects, {
    fields: [payload_locked_documents_rels.redirectsID],
    references: [redirects.id],
    relationName: 'redirects',
  }),
  'payload-jobsID': one(payload_jobs, {
    fields: [payload_locked_documents_rels['payload-jobsID']],
    references: [payload_jobs.id],
    relationName: 'payload-jobs',
  }),
}));
export const relations_payload_locked_documents = relations(payload_locked_documents, ({ many }) => ({
  _rels: many(payload_locked_documents_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_preferences_rels = relations(payload_preferences_rels, ({ one }) => ({
  parent: one(payload_preferences, {
    fields: [payload_preferences_rels.parent],
    references: [payload_preferences.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [payload_preferences_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}));
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));
export const relations_contacts_phones = relations(contacts_phones, ({ one }) => ({
  _parentID: one(contacts, {
    fields: [contacts_phones._parentID],
    references: [contacts.id],
    relationName: 'phones',
  }),
}));
export const relations_contacts_emails = relations(contacts_emails, ({ one }) => ({
  _parentID: one(contacts, {
    fields: [contacts_emails._parentID],
    references: [contacts.id],
    relationName: 'emails',
  }),
}));
export const relations_contacts_socials = relations(contacts_socials, ({ one }) => ({
  _parentID: one(contacts, {
    fields: [contacts_socials._parentID],
    references: [contacts.id],
    relationName: 'socials',
  }),
}));
export const relations_contacts = relations(contacts, ({ many }) => ({
  phones: many(contacts_phones, {
    relationName: 'phones',
  }),
  emails: many(contacts_emails, {
    relationName: 'emails',
  }),
  socials: many(contacts_socials, {
    relationName: 'socials',
  }),
}));

type DatabaseSchema = {
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_posts_blocks_high_impact_hero_links_link_type: typeof enum_posts_blocks_high_impact_hero_links_link_type;
  enum_posts_blocks_high_impact_hero_links_link_appearance: typeof enum_posts_blocks_high_impact_hero_links_link_appearance;
  enum_posts_blocks_medium_impact_hero_links_link_type: typeof enum_posts_blocks_medium_impact_hero_links_link_type;
  enum_posts_blocks_medium_impact_hero_links_link_appearance: typeof enum_posts_blocks_medium_impact_hero_links_link_appearance;
  enum_posts_blocks_low_impact_hero_links_link_type: typeof enum_posts_blocks_low_impact_hero_links_link_type;
  enum_posts_blocks_low_impact_hero_links_link_appearance: typeof enum_posts_blocks_low_impact_hero_links_link_appearance;
  enum_posts_blocks_cta_links_link_type: typeof enum_posts_blocks_cta_links_link_type;
  enum_posts_blocks_cta_links_link_appearance: typeof enum_posts_blocks_cta_links_link_appearance;
  enum_posts_blocks_content_columns_size: typeof enum_posts_blocks_content_columns_size;
  enum_posts_blocks_content_columns_link_type: typeof enum_posts_blocks_content_columns_link_type;
  enum_posts_blocks_content_columns_link_appearance: typeof enum_posts_blocks_content_columns_link_appearance;
  enum_posts_blocks_archive_populate_by: typeof enum_posts_blocks_archive_populate_by;
  enum_posts_blocks_archive_relation_to: typeof enum_posts_blocks_archive_relation_to;
  enum_posts_status: typeof enum_posts_status;
  enum__posts_v_blocks_high_impact_hero_links_link_type: typeof enum__posts_v_blocks_high_impact_hero_links_link_type;
  enum__posts_v_blocks_high_impact_hero_links_link_appearance: typeof enum__posts_v_blocks_high_impact_hero_links_link_appearance;
  enum__posts_v_blocks_medium_impact_hero_links_link_type: typeof enum__posts_v_blocks_medium_impact_hero_links_link_type;
  enum__posts_v_blocks_medium_impact_hero_links_link_appearance: typeof enum__posts_v_blocks_medium_impact_hero_links_link_appearance;
  enum__posts_v_blocks_low_impact_hero_links_link_type: typeof enum__posts_v_blocks_low_impact_hero_links_link_type;
  enum__posts_v_blocks_low_impact_hero_links_link_appearance: typeof enum__posts_v_blocks_low_impact_hero_links_link_appearance;
  enum__posts_v_blocks_cta_links_link_type: typeof enum__posts_v_blocks_cta_links_link_type;
  enum__posts_v_blocks_cta_links_link_appearance: typeof enum__posts_v_blocks_cta_links_link_appearance;
  enum__posts_v_blocks_content_columns_size: typeof enum__posts_v_blocks_content_columns_size;
  enum__posts_v_blocks_content_columns_link_type: typeof enum__posts_v_blocks_content_columns_link_type;
  enum__posts_v_blocks_content_columns_link_appearance: typeof enum__posts_v_blocks_content_columns_link_appearance;
  enum__posts_v_blocks_archive_populate_by: typeof enum__posts_v_blocks_archive_populate_by;
  enum__posts_v_blocks_archive_relation_to: typeof enum__posts_v_blocks_archive_relation_to;
  enum__posts_v_version_status: typeof enum__posts_v_version_status;
  enum_events_type: typeof enum_events_type;
  enum_events_active: typeof enum_events_active;
  enum_tickets_source: typeof enum_tickets_source;
  enum_homepage_status: typeof enum_homepage_status;
  enum__homepage_v_version_status: typeof enum__homepage_v_version_status;
  enum_redirects_to_type: typeof enum_redirects_to_type;
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug;
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state;
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug;
  enum_contacts_socials_platform: typeof enum_contacts_socials_platform;
  users_sessions: typeof users_sessions;
  users: typeof users;
  media: typeof media;
  pages_blocks_q_a_block: typeof pages_blocks_q_a_block;
  pages_blocks_faq_chess_mate: typeof pages_blocks_faq_chess_mate;
  pages_blocks_gallery7: typeof pages_blocks_gallery7;
  pages_blocks_testimonial25_card_block: typeof pages_blocks_testimonial25_card_block;
  pages_blocks_testimonial25_block: typeof pages_blocks_testimonial25_block;
  pages_blocks_statistic: typeof pages_blocks_statistic;
  pages_blocks_statistics: typeof pages_blocks_statistics;
  pages_blocks_agenda_items: typeof pages_blocks_agenda_items;
  pages_blocks_agenda: typeof pages_blocks_agenda;
  pages_blocks_lecturers_lecturers: typeof pages_blocks_lecturers_lecturers;
  pages_blocks_lecturers: typeof pages_blocks_lecturers;
  pages_blocks_timeline_steps: typeof pages_blocks_timeline_steps;
  pages_blocks_timeline: typeof pages_blocks_timeline;
  pages_blocks_who_is_the_conf_for_items: typeof pages_blocks_who_is_the_conf_for_items;
  pages_blocks_who_is_the_conf_for: typeof pages_blocks_who_is_the_conf_for;
  pages_blocks_pricing_with_countdown_plans_features: typeof pages_blocks_pricing_with_countdown_plans_features;
  pages_blocks_pricing_with_countdown_plans: typeof pages_blocks_pricing_with_countdown_plans;
  pages_blocks_pricing_with_countdown: typeof pages_blocks_pricing_with_countdown;
  pages_blocks_testimonials2_testimonials: typeof pages_blocks_testimonials2_testimonials;
  pages_blocks_testimonials2: typeof pages_blocks_testimonials2;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  _pages_v_blocks_q_a_block: typeof _pages_v_blocks_q_a_block;
  _pages_v_blocks_faq_chess_mate: typeof _pages_v_blocks_faq_chess_mate;
  _pages_v_blocks_gallery7: typeof _pages_v_blocks_gallery7;
  _pages_v_blocks_testimonial25_card_block: typeof _pages_v_blocks_testimonial25_card_block;
  _pages_v_blocks_testimonial25_block: typeof _pages_v_blocks_testimonial25_block;
  _pages_v_blocks_statistic: typeof _pages_v_blocks_statistic;
  _pages_v_blocks_statistics: typeof _pages_v_blocks_statistics;
  _pages_v_blocks_agenda_items: typeof _pages_v_blocks_agenda_items;
  _pages_v_blocks_agenda: typeof _pages_v_blocks_agenda;
  _pages_v_blocks_lecturers_lecturers: typeof _pages_v_blocks_lecturers_lecturers;
  _pages_v_blocks_lecturers: typeof _pages_v_blocks_lecturers;
  _pages_v_blocks_timeline_steps: typeof _pages_v_blocks_timeline_steps;
  _pages_v_blocks_timeline: typeof _pages_v_blocks_timeline;
  _pages_v_blocks_who_is_the_conf_for_items: typeof _pages_v_blocks_who_is_the_conf_for_items;
  _pages_v_blocks_who_is_the_conf_for: typeof _pages_v_blocks_who_is_the_conf_for;
  _pages_v_blocks_pricing_with_countdown_plans_features: typeof _pages_v_blocks_pricing_with_countdown_plans_features;
  _pages_v_blocks_pricing_with_countdown_plans: typeof _pages_v_blocks_pricing_with_countdown_plans;
  _pages_v_blocks_pricing_with_countdown: typeof _pages_v_blocks_pricing_with_countdown;
  _pages_v_blocks_testimonials2_testimonials: typeof _pages_v_blocks_testimonials2_testimonials;
  _pages_v_blocks_testimonials2: typeof _pages_v_blocks_testimonials2;
  _pages_v: typeof _pages_v;
  _pages_v_rels: typeof _pages_v_rels;
  posts_populated_authors: typeof posts_populated_authors;
  posts_blocks_high_impact_hero_links: typeof posts_blocks_high_impact_hero_links;
  posts_blocks_high_impact_hero: typeof posts_blocks_high_impact_hero;
  posts_blocks_medium_impact_hero_links: typeof posts_blocks_medium_impact_hero_links;
  posts_blocks_medium_impact_hero: typeof posts_blocks_medium_impact_hero;
  posts_blocks_low_impact_hero_links: typeof posts_blocks_low_impact_hero_links;
  posts_blocks_low_impact_hero: typeof posts_blocks_low_impact_hero;
  posts_blocks_cta_links: typeof posts_blocks_cta_links;
  posts_blocks_cta: typeof posts_blocks_cta;
  posts_blocks_content_columns: typeof posts_blocks_content_columns;
  posts_blocks_content: typeof posts_blocks_content;
  posts_blocks_media_block: typeof posts_blocks_media_block;
  posts_blocks_archive: typeof posts_blocks_archive;
  posts_blocks_q_a_block: typeof posts_blocks_q_a_block;
  posts_blocks_faq_chess_mate: typeof posts_blocks_faq_chess_mate;
  posts: typeof posts;
  posts_rels: typeof posts_rels;
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors;
  _posts_v_blocks_high_impact_hero_links: typeof _posts_v_blocks_high_impact_hero_links;
  _posts_v_blocks_high_impact_hero: typeof _posts_v_blocks_high_impact_hero;
  _posts_v_blocks_medium_impact_hero_links: typeof _posts_v_blocks_medium_impact_hero_links;
  _posts_v_blocks_medium_impact_hero: typeof _posts_v_blocks_medium_impact_hero;
  _posts_v_blocks_low_impact_hero_links: typeof _posts_v_blocks_low_impact_hero_links;
  _posts_v_blocks_low_impact_hero: typeof _posts_v_blocks_low_impact_hero;
  _posts_v_blocks_cta_links: typeof _posts_v_blocks_cta_links;
  _posts_v_blocks_cta: typeof _posts_v_blocks_cta;
  _posts_v_blocks_content_columns: typeof _posts_v_blocks_content_columns;
  _posts_v_blocks_content: typeof _posts_v_blocks_content;
  _posts_v_blocks_media_block: typeof _posts_v_blocks_media_block;
  _posts_v_blocks_archive: typeof _posts_v_blocks_archive;
  _posts_v_blocks_q_a_block: typeof _posts_v_blocks_q_a_block;
  _posts_v_blocks_faq_chess_mate: typeof _posts_v_blocks_faq_chess_mate;
  _posts_v: typeof _posts_v;
  _posts_v_rels: typeof _posts_v_rels;
  categories: typeof categories;
  attendees: typeof attendees;
  events: typeof events;
  marketing_sections_blocks_partners: typeof marketing_sections_blocks_partners;
  marketing_sections_blocks_partners2: typeof marketing_sections_blocks_partners2;
  marketing_sections: typeof marketing_sections;
  marketing_sections_rels: typeof marketing_sections_rels;
  partners_blocks_partners: typeof partners_blocks_partners;
  partners: typeof partners;
  partners_rels: typeof partners_rels;
  partners2: typeof partners2;
  partners2_rels: typeof partners2_rels;
  tickets: typeof tickets;
  homepage: typeof homepage;
  homepage_rels: typeof homepage_rels;
  _homepage_v: typeof _homepage_v;
  _homepage_v_rels: typeof _homepage_v_rels;
  homepage_gallery: typeof homepage_gallery;
  homepage_gallery_rels: typeof homepage_gallery_rels;
  homepage_testimonial25_blocks_testimonial25_card_block: typeof homepage_testimonial25_blocks_testimonial25_card_block;
  homepage_testimonial25: typeof homepage_testimonial25;
  statistics_n_blocks_statistic: typeof statistics_n_blocks_statistic;
  statistics_n: typeof statistics_n;
  faq_left_right_blocks_q_a_block: typeof faq_left_right_blocks_q_a_block;
  faq_left_right: typeof faq_left_right;
  redirects: typeof redirects;
  redirects_rels: typeof redirects_rels;
  payload_jobs_log: typeof payload_jobs_log;
  payload_jobs: typeof payload_jobs;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  contacts_phones: typeof contacts_phones;
  contacts_emails: typeof contacts_emails;
  contacts_socials: typeof contacts_socials;
  contacts: typeof contacts;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_pages_blocks_q_a_block: typeof relations_pages_blocks_q_a_block;
  relations_pages_blocks_faq_chess_mate: typeof relations_pages_blocks_faq_chess_mate;
  relations_pages_blocks_gallery7: typeof relations_pages_blocks_gallery7;
  relations_pages_blocks_testimonial25_card_block: typeof relations_pages_blocks_testimonial25_card_block;
  relations_pages_blocks_testimonial25_block: typeof relations_pages_blocks_testimonial25_block;
  relations_pages_blocks_statistic: typeof relations_pages_blocks_statistic;
  relations_pages_blocks_statistics: typeof relations_pages_blocks_statistics;
  relations_pages_blocks_agenda_items: typeof relations_pages_blocks_agenda_items;
  relations_pages_blocks_agenda: typeof relations_pages_blocks_agenda;
  relations_pages_blocks_lecturers_lecturers: typeof relations_pages_blocks_lecturers_lecturers;
  relations_pages_blocks_lecturers: typeof relations_pages_blocks_lecturers;
  relations_pages_blocks_timeline_steps: typeof relations_pages_blocks_timeline_steps;
  relations_pages_blocks_timeline: typeof relations_pages_blocks_timeline;
  relations_pages_blocks_who_is_the_conf_for_items: typeof relations_pages_blocks_who_is_the_conf_for_items;
  relations_pages_blocks_who_is_the_conf_for: typeof relations_pages_blocks_who_is_the_conf_for;
  relations_pages_blocks_pricing_with_countdown_plans_features: typeof relations_pages_blocks_pricing_with_countdown_plans_features;
  relations_pages_blocks_pricing_with_countdown_plans: typeof relations_pages_blocks_pricing_with_countdown_plans;
  relations_pages_blocks_pricing_with_countdown: typeof relations_pages_blocks_pricing_with_countdown;
  relations_pages_blocks_testimonials2_testimonials: typeof relations_pages_blocks_testimonials2_testimonials;
  relations_pages_blocks_testimonials2: typeof relations_pages_blocks_testimonials2;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_blocks_q_a_block: typeof relations__pages_v_blocks_q_a_block;
  relations__pages_v_blocks_faq_chess_mate: typeof relations__pages_v_blocks_faq_chess_mate;
  relations__pages_v_blocks_gallery7: typeof relations__pages_v_blocks_gallery7;
  relations__pages_v_blocks_testimonial25_card_block: typeof relations__pages_v_blocks_testimonial25_card_block;
  relations__pages_v_blocks_testimonial25_block: typeof relations__pages_v_blocks_testimonial25_block;
  relations__pages_v_blocks_statistic: typeof relations__pages_v_blocks_statistic;
  relations__pages_v_blocks_statistics: typeof relations__pages_v_blocks_statistics;
  relations__pages_v_blocks_agenda_items: typeof relations__pages_v_blocks_agenda_items;
  relations__pages_v_blocks_agenda: typeof relations__pages_v_blocks_agenda;
  relations__pages_v_blocks_lecturers_lecturers: typeof relations__pages_v_blocks_lecturers_lecturers;
  relations__pages_v_blocks_lecturers: typeof relations__pages_v_blocks_lecturers;
  relations__pages_v_blocks_timeline_steps: typeof relations__pages_v_blocks_timeline_steps;
  relations__pages_v_blocks_timeline: typeof relations__pages_v_blocks_timeline;
  relations__pages_v_blocks_who_is_the_conf_for_items: typeof relations__pages_v_blocks_who_is_the_conf_for_items;
  relations__pages_v_blocks_who_is_the_conf_for: typeof relations__pages_v_blocks_who_is_the_conf_for;
  relations__pages_v_blocks_pricing_with_countdown_plans_features: typeof relations__pages_v_blocks_pricing_with_countdown_plans_features;
  relations__pages_v_blocks_pricing_with_countdown_plans: typeof relations__pages_v_blocks_pricing_with_countdown_plans;
  relations__pages_v_blocks_pricing_with_countdown: typeof relations__pages_v_blocks_pricing_with_countdown;
  relations__pages_v_blocks_testimonials2_testimonials: typeof relations__pages_v_blocks_testimonials2_testimonials;
  relations__pages_v_blocks_testimonials2: typeof relations__pages_v_blocks_testimonials2;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_posts_populated_authors: typeof relations_posts_populated_authors;
  relations_posts_blocks_high_impact_hero_links: typeof relations_posts_blocks_high_impact_hero_links;
  relations_posts_blocks_high_impact_hero: typeof relations_posts_blocks_high_impact_hero;
  relations_posts_blocks_medium_impact_hero_links: typeof relations_posts_blocks_medium_impact_hero_links;
  relations_posts_blocks_medium_impact_hero: typeof relations_posts_blocks_medium_impact_hero;
  relations_posts_blocks_low_impact_hero_links: typeof relations_posts_blocks_low_impact_hero_links;
  relations_posts_blocks_low_impact_hero: typeof relations_posts_blocks_low_impact_hero;
  relations_posts_blocks_cta_links: typeof relations_posts_blocks_cta_links;
  relations_posts_blocks_cta: typeof relations_posts_blocks_cta;
  relations_posts_blocks_content_columns: typeof relations_posts_blocks_content_columns;
  relations_posts_blocks_content: typeof relations_posts_blocks_content;
  relations_posts_blocks_media_block: typeof relations_posts_blocks_media_block;
  relations_posts_blocks_archive: typeof relations_posts_blocks_archive;
  relations_posts_blocks_q_a_block: typeof relations_posts_blocks_q_a_block;
  relations_posts_blocks_faq_chess_mate: typeof relations_posts_blocks_faq_chess_mate;
  relations_posts_rels: typeof relations_posts_rels;
  relations_posts: typeof relations_posts;
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors;
  relations__posts_v_blocks_high_impact_hero_links: typeof relations__posts_v_blocks_high_impact_hero_links;
  relations__posts_v_blocks_high_impact_hero: typeof relations__posts_v_blocks_high_impact_hero;
  relations__posts_v_blocks_medium_impact_hero_links: typeof relations__posts_v_blocks_medium_impact_hero_links;
  relations__posts_v_blocks_medium_impact_hero: typeof relations__posts_v_blocks_medium_impact_hero;
  relations__posts_v_blocks_low_impact_hero_links: typeof relations__posts_v_blocks_low_impact_hero_links;
  relations__posts_v_blocks_low_impact_hero: typeof relations__posts_v_blocks_low_impact_hero;
  relations__posts_v_blocks_cta_links: typeof relations__posts_v_blocks_cta_links;
  relations__posts_v_blocks_cta: typeof relations__posts_v_blocks_cta;
  relations__posts_v_blocks_content_columns: typeof relations__posts_v_blocks_content_columns;
  relations__posts_v_blocks_content: typeof relations__posts_v_blocks_content;
  relations__posts_v_blocks_media_block: typeof relations__posts_v_blocks_media_block;
  relations__posts_v_blocks_archive: typeof relations__posts_v_blocks_archive;
  relations__posts_v_blocks_q_a_block: typeof relations__posts_v_blocks_q_a_block;
  relations__posts_v_blocks_faq_chess_mate: typeof relations__posts_v_blocks_faq_chess_mate;
  relations__posts_v_rels: typeof relations__posts_v_rels;
  relations__posts_v: typeof relations__posts_v;
  relations_categories: typeof relations_categories;
  relations_attendees: typeof relations_attendees;
  relations_events: typeof relations_events;
  relations_marketing_sections_blocks_partners: typeof relations_marketing_sections_blocks_partners;
  relations_marketing_sections_blocks_partners2: typeof relations_marketing_sections_blocks_partners2;
  relations_marketing_sections_rels: typeof relations_marketing_sections_rels;
  relations_marketing_sections: typeof relations_marketing_sections;
  relations_partners_blocks_partners: typeof relations_partners_blocks_partners;
  relations_partners_rels: typeof relations_partners_rels;
  relations_partners: typeof relations_partners;
  relations_partners2_rels: typeof relations_partners2_rels;
  relations_partners2: typeof relations_partners2;
  relations_tickets: typeof relations_tickets;
  relations_homepage_rels: typeof relations_homepage_rels;
  relations_homepage: typeof relations_homepage;
  relations__homepage_v_rels: typeof relations__homepage_v_rels;
  relations__homepage_v: typeof relations__homepage_v;
  relations_homepage_gallery_rels: typeof relations_homepage_gallery_rels;
  relations_homepage_gallery: typeof relations_homepage_gallery;
  relations_homepage_testimonial25_blocks_testimonial25_card_block: typeof relations_homepage_testimonial25_blocks_testimonial25_card_block;
  relations_homepage_testimonial25: typeof relations_homepage_testimonial25;
  relations_statistics_n_blocks_statistic: typeof relations_statistics_n_blocks_statistic;
  relations_statistics_n: typeof relations_statistics_n;
  relations_faq_left_right_blocks_q_a_block: typeof relations_faq_left_right_blocks_q_a_block;
  relations_faq_left_right: typeof relations_faq_left_right;
  relations_redirects_rels: typeof relations_redirects_rels;
  relations_redirects: typeof relations_redirects;
  relations_payload_jobs_log: typeof relations_payload_jobs_log;
  relations_payload_jobs: typeof relations_payload_jobs;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_contacts_phones: typeof relations_contacts_phones;
  relations_contacts_emails: typeof relations_contacts_emails;
  relations_contacts_socials: typeof relations_contacts_socials;
  relations_contacts: typeof relations_contacts;
};

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
